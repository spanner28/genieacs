#!/usr/bin/env node
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}const path=require("path"),fs=require("fs"),os=require("os"),ipaddr_js=require("ipaddr.js"),cluster=_interopDefault(require("cluster")),http=require("http"),https=require("https"),zlib=require("zlib"),crypto=require("crypto"),vm=require("vm"),seedrandom=_interopDefault(require("seedrandom")),child_process=require("child_process"),later=require("later"),mongodb=require("mongodb"),parsimmon=require("parsimmon"),util=require("util"),iconvLite=require("iconv-lite"),yaml=require("yaml");let configDir,cwmpSsl,nbiSsl,fsSsl,uiSsl,fsHostname,ROOT_DIR=path.resolve(__dirname,"..");for(;!fs.existsSync(`${ROOT_DIR}/package.json`);){const e=path.resolve(ROOT_DIR,"..");if(e===ROOT_DIR){ROOT_DIR=process.cwd();break}ROOT_DIR=e}const options={EXT_DIR:{type:"path",default:path.resolve(ROOT_DIR,"config/ext")},MONGODB_CONNECTION_URL:{type:"string",default:"mongodb://127.0.0.1/genieacs"},CWMP_WORKER_PROCESSES:{type:"int",default:0},CWMP_PORT:{type:"int",default:7547},CWMP_INTERFACE:{type:"string",default:"0.0.0.0"},CWMP_SSL_CERT:{type:"string",default:""},CWMP_SSL_KEY:{type:"string",default:""},CWMP_LOG_FILE:{type:"path",default:""},CWMP_ACCESS_LOG_FILE:{type:"path",default:""},NBI_WORKER_PROCESSES:{type:"int",default:0},NBI_PORT:{type:"int",default:7557},NBI_INTERFACE:{type:"string",default:"0.0.0.0"},NBI_SSL_CERT:{type:"string",default:""},NBI_SSL_KEY:{type:"string",default:""},NBI_LOG_FILE:{type:"path",default:""},NBI_ACCESS_LOG_FILE:{type:"path",default:""},FS_WORKER_PROCESSES:{type:"int",default:0},FS_PORT:{type:"int",default:7567},FS_INTERFACE:{type:"string",default:"0.0.0.0"},FS_SSL_CERT:{type:"string",default:""},FS_SSL_KEY:{type:"string",default:""},FS_URL_PREFIX:{type:"string",default:""},FS_LOG_FILE:{type:"path",default:""},FS_ACCESS_LOG_FILE:{type:"path",default:""},UI_WORKER_PROCESSES:{type:"int",default:0},UI_PORT:{type:"int",default:3e3},UI_INTERFACE:{type:"string",default:"0.0.0.0"},UI_SSL_CERT:{type:"string",default:""},UI_SSL_KEY:{type:"string",default:""},UI_LOG_FILE:{type:"path",default:""},UI_ACCESS_LOG_FILE:{type:"path",default:""},UI_JWT_SECRET:{type:"string",default:""},UDP_CONNECTION_REQUEST_PORT:{type:"int",default:0},FORWARDED_HEADER:{type:"string",default:""},DOWNLOAD_TIMEOUT:{type:"int",default:3600},EXT_TIMEOUT:{type:"int",default:3e3},MAX_CACHE_TTL:{type:"int",default:86400},DEBUG_FILE:{type:"path",default:""},DEBUG_FORMAT:{type:"string",default:"yaml"},DEBUG:{type:"bool",default:!1},RETRY_DELAY:{type:"int",default:300},SESSION_TIMEOUT:{type:"int",default:30},CONNECTION_REQUEST_TIMEOUT:{type:"int",default:2e3},GPN_NEXT_LEVEL:{type:"int",default:0},GPV_BATCH_SIZE:{type:"int",default:32},MAX_DEPTH:{type:"int",default:16},COOKIES_PATH:{type:"string"},LOG_FORMAT:{type:"string",default:"simple"},ACCESS_LOG_FORMAT:{type:"string",default:""},MAX_CONCURRENT_REQUESTS:{type:"int",default:20},DATETIME_MILLISECONDS:{type:"bool",default:!0},BOOLEAN_LITERAL:{type:"bool",default:!0},CONNECTION_REQUEST_ALLOW_BASIC_AUTH:{type:"bool",default:!1},MAX_COMMIT_ITERATIONS:{type:"int",default:32},DEVICE_ONLINE_THRESHOLD:{type:"int",default:4e3}},allConfig={};function setConfig(e,t,s=!1){if(null!=allConfig[e])return!0;function n(e,t){switch(t){case"int":return Number(e);case"bool":return["true","1"].includes(String(e).trim().toLowerCase());case"string":return String(e);case"path":return e?path.resolve(e):"";default:return null}}"CONFIG_DIR"!==e&&"config-dir"!==e||(configDir=configDir||path.resolve(ROOT_DIR,t)),"CWMP_SSL"!==e&&"cwmp-ssl"!==e||(cwmpSsl=cwmpSsl||String(t).toLowerCase().trim()),"NBI_SSL"!==e&&"nbi-ssl"!==e||(nbiSsl=nbiSsl||String(t).toLowerCase().trim()),"FS_SSL"!==e&&"fs-ssl"!==e||(fsSsl=fsSsl||String(t).toLowerCase().trim()),"UI_SSL"!==e&&"ui-ssl"!==e||(uiSsl=uiSsl||String(t).toLowerCase().trim()),"FS_HOSTNAME"!==e&&"fs-hostname"!==e||(fsHostname=fsHostname||String(t).trim()),"PRESETS_CACHE_DURATION"!==e&&"presets-cache-duration"!==e||setConfig("MAX_CACHE_TTL",t),"GET_PARAMETER_NAMES_DEPTH_THRESHOLD"!==e&&"get-parameter-names-depth-threshold"!==e||setConfig("GPN_NEXT_LEVEL",t),"TASK_PARAMETERS_BATCH_SIZE"!==e&&"task-parameters-batch-size"!==e||setConfig("GPV_BATCH_SIZE",t),"FS_IP"!==e&&"fs-ip"!==e||setConfig("FS_HOSTNAME",t);let a=null;for(const[r,o]of Object.entries(options)){let i=r;if(s&&(i=i.toLowerCase().replace(/_/g,"-")),e===i?(a=n(t,o.type),i=r):e.startsWith(`${i}-`)&&(a=n(t,o.type),i=`${r}-${e.slice(r.length+1)}`),null!=a)return allConfig[i]=a,process.env[`GENIEACS_${i}`]=a,!0}return!1}const argv=process.argv.slice(2);for(;argv.length;){const e=argv.shift();if("-"===e[0]){const t=argv.shift();setConfig(e.slice(2),t,!0)}}for(const[e,t]of Object.entries(process.env))e.startsWith("GENIEACS_")&&setConfig(e.slice(9),t);const configFilename=configDir?`${configDir}/config.json`:`${ROOT_DIR}/config/config.json`;if(fs.existsSync(configFilename)){const e=JSON.parse(fs.readFileSync(configFilename).toString());for(const[t,s]of Object.entries(e))setConfig(t,s)||(process.env[`GENIEACS_${t}`]=`${s}`)}if(configDir&&setConfig("EXT_DIR",`${configDir}/ext`),["true","1"].includes(cwmpSsl)){const e=configDir||`${ROOT_DIR}/config`;setConfig("CWMP_SSL_CERT",`${e}/cwmp.crt`),setConfig("CWMP_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(nbiSsl)){const e=configDir||`${ROOT_DIR}/config`;setConfig("NBI_SSL_CERT",`${e}/cwmp.crt`),setConfig("NBI_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(fsSsl)){const e=configDir||`${ROOT_DIR}/config`;setConfig("FS_SSL_CERT",`${e}/cwmp.crt`),setConfig("FS_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(uiSsl)){const e=configDir||`${ROOT_DIR}/config`;setConfig("UI_SSL_CERT",`${e}/cwmp.crt`),setConfig("UI_SSL_KEY",`${e}/cwmp.key`)}if(fsHostname){const e=allConfig.FS_PORT||7567;setConfig("FS_URL_PREFIX",(!!allConfig.FS_SSL_CERT?"https":"http")+`://${fsHostname}:${e}/`)}for(const[e,t]of Object.entries(options))null!=t.default&&setConfig(e,t.default);function get(e,t){if(!t)return allConfig[e];let s=allConfig[e=`${e}-${t}`];if(null!=s)return s;let n=e.lastIndexOf("-");return null!=(s=allConfig[e.slice(0,n)])?s:(n=e.lastIndexOf("-",n-1),null!=(s=allConfig[e.slice(0,n)])?s:(n=e.lastIndexOf("-",n-1),null!=(s=allConfig[e.slice(0,n)])?s:(n=e.lastIndexOf("-",n-1))>0&&null!=(s=allConfig[e.slice(0,n)])?s:null))}const FORWARDED_HEADER=""+get("FORWARDED_HEADER"),cache=new WeakMap,cidrs=[];for(const e of FORWARDED_HEADER.split(",").map(e=>e.trim()))try{cidrs.push(ipaddr_js.parseCIDR(e))}catch(t){try{const t=ipaddr_js.parse(e);cidrs.push([t,8*t.toByteArray().length])}catch(e){}}function parseForwardedHeader(e){e=e.toLowerCase();const t={};let s,n=0,a=-1;for(let r=0;r<e.length;++r){const o=e.charCodeAt(r);if(61===o)n>=0&&(s=e.slice(n,r).trim(),n=-1,a=r+1);else if(59===o)a>=0&&(t[s]=e.slice(a,r).trim()),a=-1,n=r+1;else{if(44===o)return a>=0&&(t[s]=e.slice(a,r).trim()),t;if(34===o&&a>=0){const o=r;if(!e.slice(a,o).trim())for(r+=1;r<e.length;++r){const i=e.charCodeAt(r);if(92===i&&++r,34===i){t[s]=JSON.parse(e.slice(o,r+1).trim()),a=-1,n=r+1;break}}}}}return a>=0&&(t[s]=e.slice(a).trim()),t}function getRequestOrigin(e){let t=cache.get(e);if(!t){const s=e.socket;t={localAddress:s.localAddress,localPort:s.localPort,remoteAddress:s.remoteAddress,remotePort:s.remotePort,host:e.headers.host,encrypted:!!e.socket.encrypted};const n=e.headers.forwarded;if(n){const e=ipaddr_js.parse(s.remoteAddress);if(cidrs.some(t=>e.match(t))){const e=parseForwardedHeader(n);if("https"===e.proto?(t.encrypted=!0,t.localPort=443):"http"===e.proto&&(t.encrypted=!1,t.localPort=80),e.host){t.host=e.host;const[,s]=e.host.split(":",2);t.localPort=+s||t.localPort}if(e.for)if(e.for.startsWith("[")){const s=e.for.lastIndexOf("]");s>=0&&(t.remoteAddress=e.for.slice(1,s),t.remotePort=parseInt(e.for.slice(s+2))||t.remotePort)}else{const s=e.for.lastIndexOf(":");s>=0?(t.remoteAddress=e.for.slice(0,s),t.remotePort=parseInt(e.for.slice(s+1))||t.remotePort):t.remoteAddress=e.for}if(e.by)if(e.by.startsWith("[")){const s=e.by.lastIndexOf("]");s>=0&&(t.localAddress=e.by.slice(1,s),t.localPort=parseInt(e.by.slice(s+2))||t.localPort)}else{const s=e.by.lastIndexOf(":");s>=0?(t.localAddress=e.by.slice(0,s),t.localPort=parseInt(e.by.slice(s+1))||t.localPort):t.localAddress=e.by}}}cache.set(e,t)}return t}const REOPEN_EVERY=6e4,LOG_FORMAT=get("LOG_FORMAT"),ACCESS_LOG_FORMAT=get("ACCESS_LOG_FORMAT")||LOG_FORMAT,defaultMeta={};let LOG_FILE,ACCESS_LOG_FILE,LOG_SYSTEMD=!1,ACCESS_LOG_SYSTEMD=!1,logStream=fs.createWriteStream(null,{fd:process.stderr.fd}),logStat=fs.fstatSync(logStream.fd),accessLogStream=fs.createWriteStream(null,{fd:process.stdout.fd}),accessLogStat=fs.fstatSync(accessLogStream.fd);function reopen(){let e=1;LOG_FILE&&(++e,fs.stat(LOG_FILE,(t,s)=>{if(t&&!t.message.startsWith("ENOENT:"))throw t;s&&s.dev===logStat.dev&&s.ino===logStat.ino||(logStream.end(),logStream=fs.createWriteStream(null,{fd:fs.openSync(LOG_FILE,"a")}),logStat=fs.fstatSync(logStream.fd)),0==--e&&setTimeout(reopen,REOPEN_EVERY-Date.now()%REOPEN_EVERY).unref()})),ACCESS_LOG_FILE&&(++e,fs.stat(ACCESS_LOG_FILE,(t,s)=>{if(t&&!t.message.startsWith("ENOENT:"))throw t;s&&s.dev===accessLogStat.dev&&s.ino===accessLogStat.ino||(accessLogStream.end(),accessLogStream=fs.createWriteStream(null,{fd:fs.openSync(ACCESS_LOG_FILE,"a")}),accessLogStat=fs.fstatSync(accessLogStream.fd)),0==--e&&setTimeout(reopen,REOPEN_EVERY-Date.now()%REOPEN_EVERY).unref()})),0==--e&&setTimeout(reopen,REOPEN_EVERY-Date.now()%REOPEN_EVERY).unref()}function init(e,t){defaultMeta.hostname=os.hostname(),defaultMeta.pid=process.pid,defaultMeta.name=`genieacs-${e}`,defaultMeta.version=t,LOG_FILE=get(`${e.toUpperCase()}_LOG_FILE`),ACCESS_LOG_FILE=get(`${e.toUpperCase()}_ACCESS_LOG_FILE`),LOG_FILE&&(logStream=fs.createWriteStream(null,{fd:fs.openSync(LOG_FILE,"a")}),logStat=fs.fstatSync(logStream.fd)),ACCESS_LOG_FILE&&(accessLogStream=fs.createWriteStream(null,{fd:fs.openSync(ACCESS_LOG_FILE,"a")}),accessLogStat=fs.fstatSync(accessLogStream.fd));const s=process.env.JOURNAL_STREAM;if(s){const[e,t]=s.split(":").map(parseInt);LOG_SYSTEMD=logStat.dev===e&&logStat.ino===t,ACCESS_LOG_SYSTEMD=accessLogStat.dev===e&&accessLogStat.ino===t}(LOG_FILE||ACCESS_LOG_FILE)&&setTimeout(reopen,REOPEN_EVERY-Date.now()%REOPEN_EVERY).unref()}function flatten(e){e.sessionContext&&(e.deviceId=e.sessionContext.deviceId,e.remoteAddress=getRequestOrigin(e.sessionContext.httpRequest).remoteAddress,delete e.sessionContext),e.exception&&(e.exceptionName=e.exception.name,e.exceptionMessage=e.exception.message,e.exceptionStack=e.exception.stack,delete e.exception),e.task&&(e.taskId=e.task._id,delete e.task),e.rpc&&(e.rpc.acsRequest?(e.acsRequestId=e.rpc.id,e.acsRequestName=e.rpc.acsRequest.name,e.rpc.acsRequest.commandKey&&(e.acsRequestCommandKey=e.rpc.acsRequest.commandKey)):e.rpc.cpeRequest?(e.cpeRequestId=e.rpc.id,"Inform"===e.rpc.cpeRequest.name?(e.informEvent=e.rpc.cpeRequest.event.join(","),e.informRetryCount=e.rpc.cpeRequest.retryCount):(e.cpeRequestName=e.rpc.cpeRequest.name,e.rpc.cpeRequest.commandKey&&(e.cpeRequestCommandKey=e.rpc.cpeRequest.commandKey))):e.rpc.cpeFault&&(e.acsRequestId=e.rpc.id,e.cpeFaultCode=e.rpc.cpeFault.detail.faultCode,e.cpeFaultString=e.rpc.cpeFault.detail.faultString),delete e.rpc),e.fault&&(e.faultCode=e.fault.code,e.faultMessage=e.fault.message,delete e.fault),e.context&&(e.remoteAddress=getRequestOrigin(e.context.req).remoteAddress,e.context.state.user&&(e.user=e.context.state.user.username),delete e.context);for(const[t,s]of Object.entries(e))null==s&&delete e[t];return e}function formatJson(e,t){if(t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${JSON.stringify(flatten(e))}${os.EOL}`}return`${JSON.stringify(flatten(e))}${os.EOL}`}function formatSimple(e,t){const s={user:!0,remoteAddress:!0,severity:!0,timestamp:!0,message:!0,deviceId:!!e.sessionContext};flatten(e);let n="";e.remoteAddress&&(n=e.deviceId&&s.deviceId?`${e.remoteAddress} ${e.deviceId}: `:e.user?`${e.user}@${e.remoteAddress}: `:`${e.remoteAddress}: `);const a=Object.keys(e);let r="";const o=[];for(const t of a)s[t]||o.push(`${t}=${JSON.stringify(e[t])}`);if(o.length&&(r=`; ${o.join(" ")}`),t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${n}${e.message}${r}${os.EOL}`}return`${e.timestamp} [${e.severity.toUpperCase()}] ${n}${e.message}${r}${os.EOL}`}function log(e){e.timestamp=(new Date).toISOString(),"json"===LOG_FORMAT?(e=Object.assign({},defaultMeta,e),logStream.write(formatJson(e,LOG_SYSTEMD))):logStream.write(formatSimple(e,LOG_SYSTEMD))}function info(e){e.severity="info",log(e)}function warn(e){e.severity="warn",log(e)}function error(e){e.severity="error",log(e)}function accessLog(e){e.timestamp=(new Date).toISOString(),"json"===ACCESS_LOG_FORMAT?(Object.assign(e,defaultMeta),accessLogStream.write(formatJson(e,ACCESS_LOG_SYSTEMD))):accessLogStream.write(formatSimple(e,ACCESS_LOG_SYSTEMD))}function accessInfo(e){e.severity="info",accessLog(e)}function accessWarn(e){e.severity="warn",accessLog(e)}function accessError(e){e.severity="error",accessLog(e)}let respawnTimestamp=0,crashes=[];function fork(){const e=cluster.fork();return e.on("error",t=>{if("EPIPE"!==t.code)throw t;setTimeout(()=>{if(!e.isDead())throw t},50)}),e}function restartWorker(e,t,s){const n={message:"Worker died",pid:e.process.pid,exitCode:null,signal:null};null!=t&&(n.exitCode=t),null!=s&&(n.signal=s),error(n);const a=Date.now();crashes.push(a);let r=0,o=0,i=0;if(crashes=crashes.filter(e=>{if(e>a-6e4)++r;else if(e>a-12e4)++o;else{if(!(e>a-18e4))return!1;++i}return!0}),r>5&&o>5&&i>5){process.exitCode=1,cluster.removeListener("exit",restartWorker);for(const e in cluster.workers)cluster.workers[e].kill();error({message:"Too many crashes, exiting",pid:process.pid})}else(respawnTimestamp=Math.max(a,respawnTimestamp+2e3))!==a?setTimeout(()=>{process.exitCode||fork()},respawnTimestamp-a):fork()}function start(e,t,s){cluster.on("listening",(e,n)=>{4!==n.addressType&&6!==n.addressType||n.address!==s||n.port!==t||info({message:"Worker listening",pid:e.process.pid,address:n.address,port:n.port})}),cluster.on("exit",restartWorker),e||(e=Math.max(2,os.cpus().length));for(let t=0;t<e;++t)fork()}function stop(){cluster.removeListener("exit",restartWorker);for(const e in cluster.workers)cluster.workers[e].kill()}const worker=cluster.worker;let server,listener;function closeServer(e,t){server?(setTimeout(()=>{if(!t)return;server.removeListener("request",listener),server.setTimeout(1);const e=t;t=null,setTimeout(e,1e3)},e).unref(),server.close(()=>{if(!t)return;const e=t;t=null,setTimeout(e,50)})):t()}function start$1(e,t,s,n,a,r=-1){if(listener=n,s&&s.key&&s.cert){const e={key:s.key.split(":").map(e=>fs.readFileSync(path.resolve(ROOT_DIR,e.trim()))),cert:s.cert.split(":").map(e=>fs.readFileSync(path.resolve(ROOT_DIR,e.trim())))};server=https.createServer(e,listener),null!=a&&server.on("secureConnection",a)}else server=http.createServer(listener),null!=a&&server.on("connection",a);r>=0&&(server.keepAliveTimeout=r),server.listen(e,t)}function stop$1(){return new Promise((e,t)=>{setTimeout(()=>{t(new Error("Could not close server in a timely manner"))},3e4).unref(),closeServer(2e4,e)})}function parseHeaderFeilds(e){const t={},s=e.split(",");let n;for(;null!=(n=s.shift());){const e=n.split("=",1)[0];if(e.length===n.length){if(!n.trim())continue;throw new Error("Unable to parse auth header")}let a=n.slice(e.length+1);if(/^\s*"/.test(a)){for(;!/[^\\]"\s*$/.test(a);){const e=s.shift();if(null==e)throw new Error("Unable to parse auth header");a+=","+e}try{a=JSON.parse(a)}catch(e){throw new Error("Unable to parse auth header")}}else a=a.trim();t[e.trim()]=a}return t}function parseAuthorizationHeader(e){const t=(e=e.trim()).split(" ",1)[0],s={method:t};if("Basic"===t){const n=/^([^:]*):(.*)$/.exec(Buffer.from(e.slice(t.length+1),"base64").toString());if(!n)throw new Error("Unable to parse auth header");s.username=n[1],s.password=n[2]}else"Digest"===t&&Object.assign(s,parseHeaderFeilds(e.slice(t.length+1)))}function digest(e,t,s,n,a,r,o,i,c,l){const u=crypto.createHash("md5");u.update(e).update(":").update(t).update(":").update(s);const p=u.digest("hex"),f=crypto.createHash("md5");if(f.update(a).update(":").update(r),"auth-int"===o){const e=crypto.createHash("md5").update(i||"").digest("hex");f.update(":").update(e)}const d=f.digest("hex"),m=crypto.createHash("md5");return m.update(p).update(":").update(n),o&&m.update(":").update(l).update(":").update(c).update(":").update(o),m.update(":").update(d),m.digest("hex")}function generateDeviceId(e){function t(e){return e.replace(/[^A-Za-z0-9_]/g,e=>{const t=Buffer.from(e,"utf8");let s="";for(const e of t)s+="%"+e.toString(16).toUpperCase();return s})}return e.ProductClass?t(e.OUI)+"-"+t(e.ProductClass)+"-"+t(e.SerialNumber):t(e.OUI)+"-"+t(e.SerialNumber)}function escapeRegExp(e){return e.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")}const CHAR_SINGLE_QUOTE=39,CHAR_DOUBLE_QUOTE=34,CHAR_LESS_THAN=60,CHAR_GREATER_THAN=62,CHAR_COLON=58,CHAR_SPACE=32,CHAR_TAB=9,CHAR_CR=13,CHAR_LF=10,CHAR_SLASH=47,CHAR_EXMARK=33,CHAR_QMARK=63,CHAR_EQUAL=61,STATE_LESS_THAN=1,STATE_SINGLE_QUOTE=2,STATE_DOUBLE_QUOTE=3;function parseXmlDeclaration(e){for(const t of["utf16le","utf8","latin1","ascii"]){let s=e.toString(t,0,150);if(s.startsWith("<?xml")){s=s.split("\n")[0].trim();try{return parseAttrs(s.slice(5,-2))}catch(e){}}}return null}function parseAttrs(e){const t=[],s=e.length;let n=0,a="",r="",o="",i=0,c=0;for(let l=0;l<s;++l){const s=e.charCodeAt(l);switch(s){case CHAR_SINGLE_QUOTE:case CHAR_DOUBLE_QUOTE:if(n===s){if(n=0,a){const s={name:a,namespace:r,localName:o,value:e.slice(i+1,l)};t.push(s),a="",i=l+1}}else n=s,i=l;continue;case CHAR_COLON:i>=c&&(c=l);continue;case CHAR_EQUAL:if(a)throw new Error(`Unexpected character at ${l}`);a=e.slice(i,l).trim(),c>i?(r=e.slice(i,c).trim(),o=e.slice(c+1,l).trim()):(r="",o=a)}}if(a)throw new Error(`Attribute must have value at ${i}`);const l=e.slice(i);if(l.trim())throw new Error(`Unexpected string at ${s-l.length}`);return t}function decodeEntities(e){return e.replace(/&[0-9a-z#]+;/gi,e=>{switch(e){case"&quot;":return'"';case"&amp;":return"&";case"&apos;":return"'";case"&lt;":return"<";case"&gt;":return">";default:if(e.startsWith("&#x")){const t=e.slice(3,-1).toLowerCase(),s=parseInt(t,16);if(t.endsWith(s.toString(16)))return String.fromCharCode(s)}else if(e.startsWith("&#")){const t=e.slice(2,-1),s=parseInt(t);if(t.endsWith(s.toString()))return String.fromCharCode(s)}}return e})}function encodeEntities(e){const t={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};return e.replace(/[&"'<>]/g,e=>t[e])}function parseXml(e){const t=e.length;let s=0,n=0,a=0,r=0;const o={name:"root",namespace:"",localName:"root",attrs:"",text:"",bodyIndex:0,children:[]},i=[o];for(let o=0;o<t;++o)switch(e.charCodeAt(o)){case CHAR_SINGLE_QUOTE:switch(255&s){case STATE_SINGLE_QUOTE:s=a,n=r,a=0;continue;case STATE_LESS_THAN:a=s,r=n,s=STATE_SINGLE_QUOTE,n=o;continue}continue;case CHAR_DOUBLE_QUOTE:switch(255&s){case STATE_DOUBLE_QUOTE:s=a,n=r,a=0;continue;case STATE_LESS_THAN:a=s,r=n,s=STATE_DOUBLE_QUOTE,n=o;continue}continue;case CHAR_LESS_THAN:0==(255&s)&&(a=s,r=n,s=STATE_LESS_THAN,n=o);continue;case CHAR_COLON:if((255&s)===STATE_LESS_THAN){0===(s>>8&255)&&(s^=(o-n&255)<<8)}continue;case CHAR_SPACE:case CHAR_TAB:case CHAR_CR:case CHAR_LF:if((255&s)===STATE_LESS_THAN){0===(s>>16&255)&&(s^=(o-n&255)<<16)}continue;case CHAR_GREATER_THAN:if((255&s)===STATE_LESS_THAN){const t=s>>16&255;let c,l,u,p,f,d,m;switch(e.charCodeAt(n+1)){case CHAR_SLASH:if(u=i.pop(),c=0===t?e.slice(n+2,o):e.slice(n+2,n+t),u.name!==c)throw new Error(`Unmatched closing tag at ${o}`);u.children.length||(u.text=e.slice(u.bodyIndex,n)),s=a,n=r,a=0;continue;case CHAR_EXMARK:if(e.startsWith("![CDATA[",n+1)){if(e.endsWith("]]",o))throw new Error(`CDATA nodes are not supported at ${o}`)}else e.startsWith("!--",n+1)&&e.endsWith("--",o)&&(s=a,n=r,a=0);continue;case CHAR_QMARK:e.charCodeAt(o-1)===CHAR_QMARK&&(s=a,n=r,a=0);continue;default:f=+(e.charCodeAt(o-1)===CHAR_SLASH),p=i[i.length-1],l=s>>8&255,c=0===t?e.slice(n+1,o-f):e.slice(n+1,n+t),l&&(!t||l<t)?(d=c.slice(l),m=c.slice(0,l-1)):(d=c,m=""),u={name:c,namespace:m,localName:d,attrs:t?e.slice(n+t+1,o-f):"",text:"",bodyIndex:o+1,children:[]},p.children.push(u),f||i.push(u),s=a,n=r,a=0;continue}}continue}if(s)throw new Error(`Unclosed token at ${n}`);if(i.length>1){const e=i[i.length-1];throw new Error(`Unclosed XML element at ${e.bodyIndex}`)}return o.children.length||(o.text=e),o}let cache1=new Map,cache2=new Map;const keys=new WeakMap;function getKey(e){if(null===e)return"null";if(void 0===e)return"undefined";const t=typeof e;if("number"===t||"boolean"===t||"string"===t)return`${t}:${e}`;if("function"!==t&&"object"!==t)throw new Error(`Cannot memoize ${t} arguments`);let s=keys.get(e);if(!s){s=`${t}:${Math.trunc(Math.random()*Number.MAX_SAFE_INTEGER).toString(36)}`,keys.set(e,s)}return s}function memoize(e){const t=getKey(e);return(...s)=>{const n=JSON.stringify(s.map(getKey))+t;if(cache1.has(n))return cache1.get(n);let a;return a=cache2.has(n)?cache2.get(n):e(...s),cache1.set(n,a),a}}const interval=setInterval(()=>{cache2=cache1,cache1=new Map},12e4);interval.unref&&interval.unref();const version="1.2.0-beta.0+20200714065211",SERVER_NAME=`GenieACS/${version}`,NAMESPACES={"1.0":{"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-0"},1.1:{"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-1"},1.2:{"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},1.3:{"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},1.4:{"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-3"}};let warnings;const memoizedParseAttrs=memoize(parseAttrs);function parseBool(e){return"true"===(e=""+e)||"TRUE"===e||"True"===e||"1"===e||"false"!==e&&"FALSE"!==e&&"False"!==e&&"0"!==e&&null}function event(e){return e.children.filter(e=>"EventStruct"===e.localName).map(e=>e.children.find(e=>"EventCode"===e.localName).text.trim())}function parameterInfoList(e){return e.children.filter(e=>"ParameterInfoStruct"===e.localName).map(e=>{let t,s;for(const n of e.children)switch(n.localName){case"Name":t=n.text;break;case"Writable":s=n.text}let n=parseBool(s);return null===n&&(warnings.push({message:"Invalid writable attribute",parameter:t}),n=!1),[t,n]})}const getValueType=memoize(e=>parseAttrs(e).find(e=>"type"===e.localName).value.trim());function parameterValueList(e){return e.children.filter(e=>"ParameterValueStruct"===e.localName).map(e=>{let t,s;for(const n of e.children)switch(n.localName){case"Name":s=n.text;break;case"Value":t=n}const n=getValueType(t.attrs),a=decodeEntities(t.text);let r=a;return"xsd:boolean"===n?null===(r=parseBool(a))&&(warnings.push({message:"Invalid value attribute",parameter:s}),r=a):"xsd:int"===n||"xsd:unsignedInt"===n?(r=parseInt(a),isNaN(r)&&(warnings.push({message:"Invalid value attribute",parameter:s}),r=a)):"xsd:dateTime"===n&&(r=Date.parse(a),isNaN(r)&&(warnings.push({message:"Invalid value attribute",parameter:s}),r=a)),[s,r,n]})}function GetParameterNames(e){return`<cwmp:GetParameterNames><ParameterPath>${e.parameterPath}</ParameterPath><NextLevel>${+e.nextLevel}</NextLevel></cwmp:GetParameterNames>`}function GetParameterNamesResponse(e){return{name:"GetParameterNamesResponse",parameterList:parameterInfoList(e.children.find(e=>"ParameterList"===e.localName))}}function GetParameterValues(e){return`<cwmp:GetParameterValues><ParameterNames soap-enc:arrayType="xsd:string[${e.parameterNames.length}]">${e.parameterNames.map(e=>`<string>${e}</string>`).join("")}</ParameterNames></cwmp:GetParameterValues>`}function GetParameterValuesResponse(e){return{name:"GetParameterValuesResponse",parameterList:parameterValueList(e.children.find(e=>"ParameterList"===e.localName))}}function SetParameterValues(e){const t=e.parameterList.map(t=>{let s=t[1];return"xsd:dateTime"===t[2]&&"number"==typeof s&&(s=new Date(s).toISOString(),!1===e.DATETIME_MILLISECONDS&&(s=s.replace(".000",""))),"xsd:boolean"===t[2]&&"boolean"==typeof s&&!1===e.BOOLEAN_LITERAL&&(s=+s),`<ParameterValueStruct><Name>${t[0]}</Name><Value xsi:type="${t[2]}">${encodeEntities(""+s)}</Value></ParameterValueStruct>`});return`<cwmp:SetParameterValues><ParameterList soap-enc:arrayType="cwmp:ParameterValueStruct[${e.parameterList.length}]">${t.join("")}</ParameterList><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:SetParameterValues>`}function SetParameterValuesResponse(e){return{name:"SetParameterValuesResponse",status:parseInt(e.children.find(e=>"Status"===e.localName).text)}}function AddObject(e){return`<cwmp:AddObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:AddObject>`}function AddObjectResponse(e){let t,s;for(const n of e.children)switch(n.localName){case"InstanceNumber":t=parseInt(n.text);break;case"Status":s=parseInt(n.text)}return{name:"AddObjectResponse",instanceNumber:t,status:s}}function DeleteObject(e){return`<cwmp:DeleteObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:DeleteObject>`}function DeleteObjectResponse(e){return{name:"DeleteObjectResponse",status:parseInt(e.children.find(e=>"Status"===e.localName).text)}}function Reboot(e){return`<cwmp:Reboot><CommandKey>${e.commandKey||""}</CommandKey></cwmp:Reboot>`}function RebootResponse(){return{name:"RebootResponse"}}function FactoryReset(){return"<cwmp:FactoryReset></cwmp:FactoryReset>"}function FactoryResetResponse(){return{name:"FactoryResetResponse"}}function Download(e){return`<cwmp:Download><CommandKey>${e.commandKey||""}</CommandKey><FileType>${e.fileType}</FileType><URL>${e.url}</URL><Username>${encodeEntities(e.username||"")}</Username><Password>${encodeEntities(e.password||"")}</Password><FileSize>${e.fileSize||"0"}</FileSize><TargetFileName>${encodeEntities(e.targetFileName||"")}</TargetFileName><DelaySeconds>${e.delaySeconds||"0"}</DelaySeconds><SuccessURL>${encodeEntities(e.successUrl||"")}</SuccessURL><FailureURL>${encodeEntities(e.failureUrl||"")}</FailureURL></cwmp:Download>`}function DownloadResponse(e){let t,s,n;for(const a of e.children)switch(a.localName){case"Status":t=parseInt(a.text);break;case"StartTime":s=Date.parse(a.text);break;case"CompleteTime":n=Date.parse(a.text)}return{name:"DownloadResponse",status:t,startTime:s,completeTime:n}}function Inform(e){let t,s,n;const a={Manufacturer:null,OUI:null,ProductClass:null,SerialNumber:null};for(const r of e.children)switch(r.localName){case"ParameterList":n=parameterValueList(r);break;case"DeviceId":for(const e of r.children){const t=e.localName;t in a&&(a[t]=decodeEntities(e.text))}break;case"Event":s=event(r);break;case"RetryCount":t=parseInt(r.text)}return{name:"Inform",parameterList:n,deviceId:a,event:s,retryCount:t}}function InformResponse(){return"<cwmp:InformResponse><MaxEnvelopes>1</MaxEnvelopes></cwmp:InformResponse>"}function GetRPCMethods(){return{name:"GetRPCMethods"}}function GetRPCMethodsResponse(e){return`<cwmp:GetRPCMethodsResponse><MethodList soap-enc:arrayType="xsd:string[${e.methodList.length}]">${e.methodList.map(e=>`<string>${e}</string>`).join("")}</MethodList></cwmp:GetRPCMethodsResponse>`}function TransferComplete(e){let t,s,n,a;for(const r of e.children)switch(r.localName){case"CommandKey":t=r.text;break;case"FaultStruct":s=faultStruct(r);break;case"StartTime":n=Date.parse(r.text);break;case"CompleteTime":a=Date.parse(r.text)}return{name:"TransferComplete",commandKey:t,faultStruct:s,startTime:n,completeTime:a}}function TransferCompleteResponse(){return"<cwmp:TransferCompleteResponse></cwmp:TransferCompleteResponse>"}function RequestDownload(e){return{name:"RequestDownload",fileType:e.children.find(e=>"FileType"===e.localName).text}}function RequestDownloadResponse(){return"<cwmp:RequestDownloadResponse></cwmp:RequestDownloadResponse>"}function faultStruct(e){let t,s,n,a,r,o;for(const i of e.children)switch(i.localName){case"FaultCode":t=i.text;break;case"FaultString":s=decodeEntities(i.text);break;case"SetParameterValuesFault":n=n||[];for(const e of i.children)switch(e.localName){case"ParameterName":a=e.text;break;case"FaultCode":r=e.text;break;case"FaultString":o=decodeEntities(e.text)}n.push({parameterName:a,faultCode:r,faultString:o})}return{faultCode:t,faultString:s,setParameterValuesFault:n}}function fault(e){let t,s,n;for(const a of e.children)switch(a.localName){case"faultcode":t=a.text;break;case"faultstring":s=decodeEntities(a.text);break;case"detail":n=faultStruct(a.children.find(e=>"Fault"===e.localName))}return{faultCode:t,faultString:s,detail:n}}function request(e,t,s){warnings=s;const n={id:null,cwmpVersion:t,sessionTimeout:null,cpeRequest:null,cpeFault:null,cpeResponse:null};if(!e.length)return n;const a=parseXml(e);if(!a.children.length)return n;const r=a.children[0];let o,i;for(const e of r.children)switch(e.localName){case"Header":o=e;break;case"Body":i=e}if(o)for(const e of o.children)switch(e.localName){case"ID":n.id=decodeEntities(e.text);break;case"sessionTimeout":n.sessionTimeout=parseInt(e.text)}const c=i.children[0];if(!n.cwmpVersion&&"Fault"!==c.localName){let e,t;for(const s of[c,i,r])if(e=e||s.namespace,s.attrs){const n=memoizedParseAttrs(s.attrs),a=e?n.find(t=>"xmlns"===t.namespace&&t.localName===e):n.find(e=>"xmlns"===e.name);a&&(t=a.value)}switch(t){case"urn:dslforum-org:cwmp-1-0":n.cwmpVersion="1.0";break;case"urn:dslforum-org:cwmp-1-1":n.cwmpVersion="1.1";break;case"urn:dslforum-org:cwmp-1-2":n.sessionTimeout?n.cwmpVersion="1.3":n.cwmpVersion="1.2";break;case"urn:dslforum-org:cwmp-1-3":n.cwmpVersion="1.4";break;default:throw new Error("Unrecognized CWMP version")}}switch(c.localName){case"Inform":n.cpeRequest=Inform(c);break;case"GetRPCMethods":n.cpeRequest=GetRPCMethods();break;case"TransferComplete":n.cpeRequest=TransferComplete(c);break;case"RequestDownload":n.cpeRequest=RequestDownload(c);break;case"GetParameterNamesResponse":n.cpeResponse=GetParameterNamesResponse(c);break;case"GetParameterValuesResponse":n.cpeResponse=GetParameterValuesResponse(c);break;case"SetParameterValuesResponse":n.cpeResponse=SetParameterValuesResponse(c);break;case"AddObjectResponse":n.cpeResponse=AddObjectResponse(c);break;case"DeleteObjectResponse":n.cpeResponse=DeleteObjectResponse(c);break;case"RebootResponse":n.cpeResponse=RebootResponse();break;case"FactoryResetResponse":n.cpeResponse=FactoryResetResponse();break;case"DownloadResponse":n.cpeResponse=DownloadResponse(c);break;case"Fault":n.cpeFault=fault(c);break;default:throw new Error(`8000 Method not supported ${c.localName}`)}return n}const namespacesAttrs={"1.0":Object.entries(NAMESPACES["1.0"]).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.1:Object.entries(NAMESPACES[1.1]).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.2:Object.entries(NAMESPACES[1.2]).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.3:Object.entries(NAMESPACES[1.3]).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.4:Object.entries(NAMESPACES[1.4]).map(([e,t])=>`xmlns:${e}="${t}"`).join(" ")};function response(e){const t={Server:SERVER_NAME,SOAPServer:SERVER_NAME};if(!e)return{code:204,headers:t,data:""};let s;if(e.acsResponse)switch(e.acsResponse.name){case"InformResponse":s=InformResponse();break;case"GetRPCMethodsResponse":s=GetRPCMethodsResponse(e.acsResponse);break;case"TransferCompleteResponse":s=TransferCompleteResponse();break;case"RequestDownloadResponse":s=RequestDownloadResponse();break;default:throw new Error(`Unknown method response type ${e.acsResponse.name}`)}else if(e.acsRequest)switch(e.acsRequest.name){case"GetParameterNames":s=GetParameterNames(e.acsRequest);break;case"GetParameterValues":s=GetParameterValues(e.acsRequest);break;case"SetParameterValues":s=SetParameterValues(e.acsRequest);break;case"AddObject":s=AddObject(e.acsRequest);break;case"DeleteObject":s=DeleteObject(e.acsRequest);break;case"Reboot":s=Reboot(e.acsRequest);break;case"FactoryReset":s=FactoryReset();break;case"Download":s=Download(e.acsRequest);break;default:throw new Error(`Unknown method request ${e.acsRequest.name}`)}return t["Content-Type"]='text/xml; charset="utf-8"',{code:200,headers:t,data:`<?xml version="1.0" encoding="UTF-8"?>\n<soap-env:Envelope ${namespacesAttrs[e.cwmpVersion]}><soap-env:Header><cwmp:ID soap-env:mustUnderstand="1">${e.id}</cwmp:ID></soap-env:Header><soap-env:Body>${s}</soap-env:Body></soap-env:Envelope>`}}const CHANGE_FLAGS={object:2,writable:4,value:8};function parseBool$1(e){return"true"===(e=""+e)||"TRUE"===e||"True"===e||"1"===e||"false"!==e&&"FALSE"!==e&&"False"!==e&&"0"!==e&&null}function sanitizeParameterValue(e){if(null!=e[0])switch(e[1]){case"xsd:boolean":if("boolean"!=typeof e[0]){const t=parseBool$1(e[0]);e[0]=null==t?""+e[0]:t}break;case"xsd:string":case"xsd:base64":case"xsd:hexBinary":"string"!=typeof e[0]&&(e[0]=""+e[0]);break;case"xsd:int":case"xsd:unsignedInt":if("number"!=typeof e[0]){const t=parseInt(e[0]);isNaN(t)?e[0]=""+e[0]:e[0]=t}break;case"xsd:dateTime":if("number"!=typeof e[0]){let t=+e[0];isNaN(t)?(t=Date.parse(e[0]),isNaN(t)?e[0]=""+e[0]:e[0]=t):e[0]=t}break;default:e[0]=JSON.parse(JSON.stringify(e[0]))}return e}function getAliasDeclarations(e,t,s=null){const n=e.stripAlias();let a=[{path:n,pathGet:t,pathSet:null,attrGet:s,attrSet:null,defer:!0}];if(e.alias)for(const[s,r]of e.segments.entries())if(Array.isArray(r)){const e=n.slice(0,s+1);for(const[s]of r)a=a.concat(getAliasDeclarations(e.concat(s),t,{value:t}))}return a}function unpack(e,t,s){let n=[];if(t.alias){const a=t.stripAlias();for(const t of e.paths.find(a,!1,!0))e.attributes.has(t,s)&&n.push(t);for(let r=t.length-1;r>=0;--r)if(t.alias&1<<r)for(const[o,i]of t.segments[r]){const t=unpack(e,a.slice(0,r+1).concat(o),s),c=[];for(const a of t){const t=e.attributes.get(a,s);if(t&&t.value&&t.value[1]&&sanitizeParameterValue([i,t.value[1][1]])[0]===t.value[1][0])for(let e=0;e<n.length;++e){let t;const s=n[e];if(s){for(t=r;t>=0&&s.segments[t]===a.segments[t];--t);t<0&&(c.push(s),n[e]=null)}}}n=c}}else for(const a of e.paths.find(t,!1,!0))e.attributes.has(a,s)&&n.push(a);return n.sort((e,t)=>{for(let s=0;s<e.length;++s){const n=e.segments[s],a=t.segments[s];if(n!==a){const e=parseInt(n),t=parseInt(a);return e===+n&&t===+a?e-t:n<a?-1:1}}return 0}),n}function clear(e,t,s,n,a=0){const r={};let o=s=s||0;n&&n.object&&(n.object>o&&(o=n.object),n.object<=n.value||(n.value=n.object));for(const i of e.paths.find(t,!0,!0,o?99:t.length)){const c=e.trackers.get(i);for(const e in c)r[e]|=c[e];const l=e.timestamps.get(i);if(void 0!==l)if(s>l||o>l&&i.length>t.length)e.timestamps.delete(i),e.attributes.delete(i),a|=1;else if(n&&i.length===t.length){const t=e.attributes.get(i);if(t){let s;for(const r in n)r in t&&n[r]>t[r][0]&&(a|=CHANGE_FLAGS[r],s||(s=Object.assign({},t),e.attributes.set(i,s)),delete s[r])}}}for(const t in r)r[t]&a&&e.changes.add(t)}function compareEquality(e,t){const s=typeof e;return null==e||"number"===s||"boolean"===s||"string"===s||"symbol"===s?e===t:JSON.stringify(e)===JSON.stringify(t)}function set(e,t,s,n,a){t=e.paths.add(t);const r=e.timestamps.get(t);let o;t.wildcard?n=void 0:r&&(o=e.attributes.get(t));let i=0;if(n){n.value&&n.value[1]&&n.value[0]>=(n.object?n.object[0]:0)&&(n.object=[n.value[0],0]),n.object&&n.object[1]&&n.object[0]>=(n.value?n.value[0]:0)&&(n.value=[n.object[0]]);const c=Object.assign({},o,n);if(o)for(const e in n)s=Math.max(s,n[e][0]),e in o?n[e][0]<=o[e][0]?c[e]=o[e]:compareEquality(n[e][1],o[e][1])||(i|=CHANGE_FLAGS[e]):i|=CHANGE_FLAGS[e];else i|=1;e.attributes.set(t,c),s<=r||(e.timestamps.set(t,s),t.length>1&&(a=set(e,t.slice(0,t.length-1),s,{object:[s,1]},a)))}else if(!(s<=r))if(e.timestamps.set(t,s),o)e.attributes.delete(t),i|=1;else if(t.wildcard)for(const n of e.paths.find(t,!1,!0,t.length))s>e.timestamps.get(n)&&(a=a||[]).push([n,s]);if(i)if(1&i)(a=a||[]).push([t,s,null,i]);else if(i&CHANGE_FLAGS.object)(a=a||[]).push([t,0,{object:n.object[0]},i]);else for(const s of e.paths.find(t,!0,!1,t.length)){const t=e.trackers.get(s);for(const s in t)t[s]&i&&e.changes.add(s)}return a}function track(e,t,s,n){t=e.paths.add(t);let a=1;if(n)for(const e of n)a|=CHANGE_FLAGS[e];let r=e.trackers.get(t);r||(r={},e.trackers.set(t,r)),r[s]|=a}function clearTrackers(e,t){if(Array.isArray(t)){for(const s of e.trackers.values())for(const e of t)delete s[e];for(const s of t)e.changes.delete(s)}else{for(const s of e.trackers.values())delete s[t];e.changes.delete(t)}}const TIMEOUT=+get("EXT_TIMEOUT"),processes={},jobs=new Map;function messageHandler(e){const t=jobs.get(e[0]);t&&(jobs.delete(e[0]),t({fault:e[1],value:e[2]}))}function run(e){return new Promise(t=>{const s=e[0],n=crypto.randomBytes(8).toString("hex");if(jobs.set(n,t),!processes[s]){const e=child_process.spawn(ROOT_DIR+"/bin/genieacs-ext",[s],{stdio:["inherit","inherit","inherit","ipc"]});processes[s]=e,e.on("error",a=>{processes[s]===e&&(jobs.delete(n)&&t({fault:{code:a.name,message:a.message},value:null}),kill(processes[s]),delete processes[s])}),e.on("disconnect",()=>{processes[s]===e&&delete processes[s]}),e.on("message",messageHandler)}return setTimeout(()=>{jobs.delete(n)&&t({fault:{code:"timeout",message:"Extension timed out"},value:null})},TIMEOUT),!!processes[s].connected&&processes[s].send([n,e.slice(1)])})}function kill(e){return new Promise(t=>{const s=Date.now()+5e3;e.kill();const n=setInterval(()=>{e.connected?Date.now()>s&&(e.kill("SIGKILL"),clearInterval(n),t()):(clearInterval(n),t())},100)})}async function killAll(){await Promise.all(Object.entries(processes).map(([e,t])=>(delete processes[e],kill(t))))}function md532(e){const t=crypto.createHash("md5").update(e).digest();return t.readUInt32LE(0)^t.readUInt32LE(4)^t.readUInt32LE(8)^t.readUInt32LE(12)}function variance(e,t){return(md532(e)>>>0)%t}function interval$1(e,t,s=0){return Math.trunc((e+s)/t)*t-s}function parseCron(e){const t=e.trim().split(/\s+/);return 5===t.length&&t.unshift("*"),later.schedule(later.parse.cron(t.join(" "),!0))}function cron(e,t,s=0){const n=[0,0],a=t.prev(1,new Date(e+s));a&&(n[0]=a.setMilliseconds(0)-s);const r=t.next(1,new Date(e+s+1e3));return r&&(n[1]=r.setMilliseconds(0)-s),n}let cache1$1=new Map,cache2$1=new Map;class Path{static parseAlias(e,t){const s=[];for(;t<e.length&&"]"!==e[t];){const{index:n,segments:a}=Path.parsePath(e,t);let r=t=n+1;for(;"]"!==e[r]&&","!==e[r];){if('"'===e[r]&&t===r)for(++r;'"'!==e[r]||"\\"===e[r-1];)if(++r>=e.length)throw new Error("Invalid alias expression");if(++r>=e.length)throw new Error("Invalid alias expression")}let o=e.slice(t,r).trim();if(t=r,'"'===o[0])try{o=JSON.parse(o)}catch(e){throw new Error("Invalid alias expression")}s.push([new Path(a),o]),","===e[t]&&++t}return s.sort((e,t)=>e[0].toString()>t[0].toString()?1:e[0].toString()<t[0].toString()?-1:e[1]>t[1]?1:e[1]<t[1]?-1:0),Object.freeze(s),{index:t,alias:s}}static parsePath(e,t){const s=[];if(t<e.length&&":"!==e[t])for(;;){if("["===e[t]){const{index:n,alias:a}=Path.parseAlias(e,t+1);t=n+1,s.push(a)}else{const n=t;for(;t<e.length&&":"!==e[t]&&"."!==e[t];)++t;const a=e.slice(n,t).trim();if(!a)throw new Error("Invalid parameter path");s.push(a)}if(t>=e.length||":"===e[t])break;if("."!==e[t])throw new Error("Invalid alias expression");++t}return Object.freeze(s),{index:t,segments:s}}constructor(e){let t=0,s=0;const n=e.map((e,n)=>{if(Array.isArray(e)){return t|=1<<n,`[${e.map(e=>`${e[0].toString()}:${JSON.stringify(e[1])}`).join(",")}]`}return"*"===e&&(s|=1<<n),e});let a=0;const r=n.map((e,t)=>(a+=e.length)+t);this.segments=e,this.wildcard=s,this.alias=t,this._string=n.join("."),this._stringIndex=r}static parse(e){let t=cache1$1.get(e);if(!t){if(!(t=cache2$1.get(e))){const{segments:s}=Path.parsePath(e,0);(t=new Path(s)).toString()!==e&&cache1$1.set(t.toString(),t)}cache1$1.set(e,t)}return t}get length(){return this.segments.length}toString(){return this._string}slice(e=0,t=this.segments.length){let s;if(e<0&&(e=Math.max(0,this.segments.length+e)),t<0&&(t=Math.max(0,this.segments.length+t)),e>=t)s="";else{const n=e>0?this._stringIndex[e-1]+1:0,a=t<=this.segments.length?this._stringIndex[t-1]:this._string.length;s=this._string.slice(n,a)}let n=cache1$1.get(s);if(!n){if(!(n=cache2$1.get(s))){const s=this.segments.slice(e,t);Object.freeze(s),n=new Path(s)}cache1$1.set(s,n)}return n}concat(e){if(!e._string)return this;if(!this._string)return e;const t=`${this._string}.${e._string}`;let s=cache1$1.get(t);if(!s){if(!(s=cache2$1.get(t))){const t=this.segments.concat(e.segments);Object.freeze(t),s=new Path(t)}cache1$1.set(t,s)}return s}stripAlias(){if(!this.alias)return this;const e=this.segments.map(e=>Array.isArray(e)?"*":e),t=e.join(".");let s=cache1$1.get(t);return s||((s=cache2$1.get(t))||(Object.freeze(e),s=new Path(e)),cache1$1.set(t,s)),s}}const interval$2=setInterval(()=>{cache2$1=cache1$1,cache1$1=new Map},12e4);interval$2.unref&&interval$2.unref();const COMMIT=Symbol(),EXT=Symbol(),UNDEFINED=void 0,context=vm.createContext();let state;const runningExtensions=new WeakMap;function runExtension(e,t,s){let n=runningExtensions.get(e);n||(n=new Map,runningExtensions.set(e,n));let a=n.get(t);return a||n.set(t,a=new Promise((a,r)=>{run(s).then(({fault:s,value:r})=>{n.delete(t),s||(e.extensionsCache[t]=r),a(s)}).catch(r)})),a}class SandboxDate{constructor(...e){return e.length?new Date(...e):new Date(state.sessionContext.timestamp)}static now(e,t){let s=state.sessionContext.timestamp;if("number"==typeof e){null==t&&(t=e);let n=0;t&&(n=variance(state.sessionContext.deviceId,t)),s=interval$1(s,e,n)}else if("string"==typeof e){let n=0;t&&(n=variance(state.sessionContext.deviceId,t)),s=cron(s,parseCron(e),n)[0]}else if(e)throw new Error("Invalid Date.now() argument");return s}static parse(e){return Date.parse(e)}static UTC(...e){return Date.UTC(...e)}}function random(){return state.rng||(state.rng=seedrandom(state.sessionContext.deviceId)),state.rng()}random.seed=function(e){state.rng=seedrandom(e)};class ParameterWrapper{constructor(e,t,s,n){for(const a of t)Object.defineProperty(this,a,{get:function(){if(state.uncommitted&&commit(),state.revision!==n&&(n=state.revision,s=unpack(state.sessionContext.deviceData,e,state.revision)),!s.length)return UNDEFINED;const t=state.sessionContext.deviceData.attributes.get(s[0],state.revision)[a];return t?t[1]:UNDEFINED}});Object.defineProperty(this,"path",{get:function(){return state.uncommitted&&commit(),state.revision!==n&&(n=state.revision,s=unpack(state.sessionContext.deviceData,e,state.revision)),s.length?s[0].toString():UNDEFINED}}),Object.defineProperty(this,"size",{get:function(){return state.uncommitted&&commit(),state.revision!==n&&(n=state.revision,s=unpack(state.sessionContext.deviceData,e,state.revision)),s.length?s.length:UNDEFINED}}),this[Symbol.iterator]=function*(){state.uncommitted&&commit(),state.revision!==n&&(n=state.revision,s=unpack(state.sessionContext.deviceData,e,state.revision));for(const e of s)yield new ParameterWrapper(e,t,[e],state.revision)}}}function declare(e,t,s){state.uncommitted=!0,t||(t={}),s||(s={});const n=Path.parse(e),a={path:n,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0},r=new Set;for(const[e,t]of Object.entries(s))"path"===e?a.pathSet=t:(r.add(e),a.attrGet||(a.attrGet={}),a.attrSet||(a.attrSet={}),a.attrGet[e]=1,"value"!==e||Array.isArray(s.value)?a.attrSet[e]=s[e]:a.attrSet.value=[s.value]);for(const[e,s]of Object.entries(t))"path"===e?a.pathGet=s:(r.add(e),a.attrGet||(a.attrGet={}),a.attrGet[e]=s);return state.declarations.push(a),new ParameterWrapper(n,r)}function clear$1(e,t,s){state.uncommitted=!0,state.revision===state.maxRevision&&state.clear.push([Path.parse(e),t,s])}function commit(){if(++state.revision,state.uncommitted=!1,state.revision===state.maxRevision+1){for(const e of state.declarations)e.defer=!1;throw COMMIT}if(state.revision>state.maxRevision+1)throw new Error("Declare function should not be called from within a try/catch block")}function ext(){++state.extCounter;const e=Array.from(arguments).map(String),t=`${state.revision}: ${JSON.stringify(e)}`;if(t in state.sessionContext.extensionsCache)return state.sessionContext.extensionsCache[t];throw state.extensions[t]=e,EXT}function log$1(e,t){if(state.revision===state.maxRevision&&state.extCounter>=0){const s=Object.assign({},t,{sessionContext:state.sessionContext,message:`Script: ${e}`});delete s.hostname,delete s.pid,delete s.name,delete s.version,delete s.deviceId,delete s.remoteAddress,accessInfo(s)}}function errorToFault(e){if(!e)return null;if(!e.name)return{code:"script",message:`${e}`};const t={code:`script.${e.name}`,message:e.message,detail:{name:e.name,message:e.message}};if(e.stack){t.detail.stack=e.stack;const s=t.detail.stack.match(/\s+at\s[^\s]+\s+at\s[^\s]+\s\(vm\.js.+\)/);s&&(t.detail.stack=t.detail.stack.slice(0,s.index))}return t}async function run$1(e,t,s,n,a,r=0){state={sessionContext:s,revision:n,maxRevision:a,uncommitted:!1,declarations:[],extensions:{},clear:[],rng:null,extCounter:r};for(const e of Object.keys(context))delete context[e];let o,i;Object.assign(context,t);try{o=e.runInContext(context,{displayErrors:!1}),i=0}catch(e){if(e===COMMIT)i=1;else{if(e!==EXT)return{fault:errorToFault(e),clear:null,declare:null,done:!1,returnValue:null};i=2}}const c=state;let l;return await Promise.all(Object.entries(c.extensions).map(async([e,t])=>{l=await runExtension(c.sessionContext,e,t)||l})),l?{fault:l,clear:null,declare:null,done:!1,returnValue:null}:2===i?run$1(e,t,s,n,a,r-c.extCounter):{fault:null,clear:c.clear,declare:c.declarations,done:0===i,returnValue:o}}function interpretEscapes(e){const t={b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};return e.replace(/\\(u[0-9a-fA-F]{4}|[^u])/,(e,s)=>{const n=s.charAt(0),a=s.slice(1);return"u"===n?String.fromCharCode(parseInt(a,16)):t.hasOwnProperty(n)?t[n]:n})}function map(e,t){if(!Array.isArray(e))return t(e);let s;for(let n=1;n<e.length;++n){const a=map(e[n],t);a!==e[n]&&((s=s||e.slice())[n]=a)}return t(s||e)}async function mapAsync(e,t){if(!Array.isArray(e))return t(e);let s;for(let n=1;n<e.length;++n){const a=await mapAsync(e[n],t);a!==e[n]&&((s=s||e.slice())[n]=a)}return t(s||e)}function binaryLeft(e,t){return parsimmon.seqMap(t,parsimmon.seq(e,t).many(),(e,t)=>t.reduce((e,t)=>{const[s,n]=t;return Array.isArray(e)&&s===e[0]?e.concat([n]):Array.isArray(n)&&s===n[0]?[s,e].concat(n.slice(1)):[s,e,n]},e))}Object.defineProperty(context,"Date",{value:SandboxDate}),Object.defineProperty(context,"declare",{value:declare}),Object.defineProperty(context,"clear",{value:clear$1}),Object.defineProperty(context,"commit",{value:commit}),Object.defineProperty(context,"ext",{value:ext}),Object.defineProperty(context,"log",{value:log$1}),context.random=random,vm.runInContext("Math.random = random;",context),delete context.random;const lang=parsimmon.createLanguage({ComparisonOperator:function(){return parsimmon.alt(parsimmon.string(">="),parsimmon.string("<>"),parsimmon.string("<="),parsimmon.string("="),parsimmon.string(">"),parsimmon.string("<")).skip(parsimmon.optWhitespace)},LikeOperator:function(){return parsimmon.alt(parsimmon.regexp(/like/i).result("LIKE").desc("LIKE"),parsimmon.regexp(/not\s+like/i).result("NOT LIKE").desc("NOT LIKE")).notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace)},IsNullOperator:function(){return parsimmon.alt(parsimmon.regexp(/is\s+null/i).result("IS NULL").desc("IS NULL"),parsimmon.regexp(/is\s+not\s+null/i).result("IS NOT NULL").desc("IS NOT NULL")).notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace)},NotOperator:function(){return parsimmon.regexp(/not/i).result("NOT").notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace).desc("NOT")},AndOperator:function(){return parsimmon.regexp(/and/i).result("AND").notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace).desc("AND")},OrOperator:function(){return parsimmon.regexp(/or/i).result("OR").notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace).desc("OR")},Parameter:function(e){return parsimmon.alt(parsimmon.regexp(/[a-zA-Z0-9_.*-]+/),e.Expression.wrap(parsimmon.string("{").skip(parsimmon.optWhitespace),parsimmon.string("}"))).atLeast(1).map(e=>["PARAM",e.length>1?["||"].concat(e):e[0]]).skip(parsimmon.optWhitespace).desc("parameter")},StringValueSql:function(){return parsimmon.regexp(/'([^']*)'/,1).atLeast(1).skip(parsimmon.optWhitespace).map(e=>e.join("'")).desc("string")},StringValueJs:function(){return parsimmon.regexp(/"((?:\\.|.)*?)"/,1).skip(parsimmon.optWhitespace).map(interpretEscapes).desc("string")},NumberValue:function(){return parsimmon.regexp(/-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?/).skip(parsimmon.optWhitespace).map(Number).desc("number")},BooleanValue:function(){return parsimmon.alt(parsimmon.regexp(/true/i).result(!0).desc("TRUE"),parsimmon.regexp(/false/i).result(!1).desc("FALSE")).notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace)},NullValue:function(){return parsimmon.regexp(/null/i).notFollowedBy(parsimmon.regexp(/[a-zA-Z0-9_]/)).skip(parsimmon.optWhitespace).result(null).desc("NULL")},FuncValue:function(e){return parsimmon.seqMap(parsimmon.regexp(/([a-zA-Z0-9_]+)/,1).skip(parsimmon.optWhitespace).desc("function"),e.ValueExpression.sepBy(parsimmon.string(",").skip(parsimmon.optWhitespace)).wrap(parsimmon.string("(").skip(parsimmon.optWhitespace),parsimmon.string(")").skip(parsimmon.optWhitespace)),(e,t)=>["FUNC",e.toUpperCase()].concat(t))},Value:function(e){return parsimmon.alt(e.NullValue,e.BooleanValue,e.NumberValue,e.StringValueSql,e.StringValueJs,e.FuncValue)},ValueExpression:function(e){return binaryLeft(parsimmon.string("||").skip(parsimmon.optWhitespace),binaryLeft(parsimmon.alt(parsimmon.string("+"),parsimmon.string("-")).skip(parsimmon.optWhitespace),binaryLeft(parsimmon.alt(parsimmon.string("*"),parsimmon.string("/")).skip(parsimmon.optWhitespace),parsimmon.alt(e.Value,e.Parameter,e.Expression.wrap(parsimmon.string("(").skip(parsimmon.optWhitespace),parsimmon.string(")").skip(parsimmon.optWhitespace))))))},Comparison:function(e){return parsimmon.alt(parsimmon.seqMap(e.ValueExpression,e.IsNullOperator,(e,t)=>[t,e]),parsimmon.seqMap(e.ValueExpression,e.ComparisonOperator,e.ValueExpression,(e,t,s)=>[t,e,s]),parsimmon.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression.skip(parsimmon.regexp(/escape/i).result("ESCAPE").skip(parsimmon.whitespace).desc("ESCAPE")),e.ValueExpression,(e,t,s,n)=>[t,e,s,n]),parsimmon.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression,(e,t,s)=>[t,e,s]))},Expression:function(e){return binaryLeft(e.OrOperator,binaryLeft(e.AndOperator,(t=e.NotOperator,s=e.Comparison.or(e.ValueExpression),parsimmon.seq(t,s).or(s)))).trim(parsimmon.optWhitespace);var t,s}});function parse(e){return e?lang.Expression.tryParse(e):null}function parseLikePattern(e,t){const s=e.split("");for(let e=0;e<s.length;++e){const n=s[e];if(n===t)s[e]=s[e+1]||"",s[e+1]="";else if("_"===n)s[e]="\\_";else if("%"===n)for(s[e]="\\%";"%"===s[e+1];)s[++e]=""}return s.filter(e=>e)}let tasksCollection,devicesCollection,presetsCollection,objectsCollection,provisionsCollection,virtualParametersCollection,faultsCollection,filesCollection,operationsCollection,permissionsCollection,usersCollection,configCollection,clientPromise,client;async function connect(){clientPromise=mongodb.MongoClient.connect(""+get("MONGODB_CONNECTION_URL"),{useNewUrlParser:!0});const e=(client=await clientPromise).db();tasksCollection=e.collection("tasks"),await tasksCollection.createIndex({device:1,timestamp:1}),devicesCollection=e.collection("devices"),presetsCollection=e.collection("presets"),objectsCollection=e.collection("objects"),filesCollection=e.collection("fs.files"),provisionsCollection=e.collection("provisions"),virtualParametersCollection=e.collection("virtualParameters"),faultsCollection=e.collection("faults"),operationsCollection=e.collection("operations"),permissionsCollection=e.collection("permissions"),usersCollection=e.collection("users"),configCollection=e.collection("config")}async function disconnect(){clientPromise&&await(await clientPromise).close()}function optimizeProjection(e){if(e[""])return{"":e[""]};const t=Object.keys(e).sort();if(t.length<=1)return e;for(let s=1;s<t.length;++s){const n=t[s-1],a=t[s];a.startsWith(n)&&("."!==a.charAt(n.length)&&"."!==a.charAt(n.length-1)||(delete e[a],t.splice(s--,1)))}return e}async function fetchDevice(e,t){const s=[[Path.parse("Events"),t,{object:[t,1],writable:[t,0]}],[Path.parse("DeviceID"),t,{object:[t,1],writable:[t,0]}]],n=await devicesCollection.findOne({_id:e});if(!n)return null;for(const[e,a]of Object.entries(n))switch(e){case"_lastInform":s.push([Path.parse("Events.Inform"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_lastBoot":s.push([Path.parse("Events.1_BOOT"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_lastBootstrap":s.push([Path.parse("Events.0_BOOTSTRAP"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_registered":s.push([Path.parse("Events.Registered"),t,{object:[t,0],writable:[t,0],value:[t,[+a,"xsd:dateTime"]]}]);break;case"_id":s.push([Path.parse("DeviceID.ID"),t,{object:[t,0],writable:[t,0],value:[t,[a,"xsd:string"]]}]);break;case"_tags":a.length&&s.push([Path.parse("Tags"),t,{object:[t,1],writable:[t,0]}]);for(let e of a)e=e.replace(/[^a-zA-Z0-9-]+/g,"_"),s.push([Path.parse("Tags."+e),t,{object:[t,0],writable:[t,1],value:[t,[!0,"xsd:boolean"]]}]);break;case"_deviceId":null!=a._Manufacturer&&s.push([Path.parse("DeviceID.Manufacturer"),t,{object:[t,0],writable:[t,0],value:[t,[a._Manufacturer,"xsd:string"]]}]),null!=a._OUI&&s.push([Path.parse("DeviceID.OUI"),t,{object:[t,0],writable:[t,0],value:[t,[a._OUI,"xsd:string"]]}]),null!=a._ProductClass&&s.push([Path.parse("DeviceID.ProductClass"),t,{object:[t,0],writable:[t,0],value:[t,[a._ProductClass,"xsd:string"]]}]),null!=a._SerialNumber&&s.push([Path.parse("DeviceID.SerialNumber"),t,{object:[t,0],writable:[t,0],value:[t,[a._SerialNumber,"xsd:string"]]}])}return function e(t,n,a,r){t._timestamp&&(t._timestamp=+t._timestamp);const o={};let i=t._timestamp||1;r>i&&(i=r),null!=t._value&&(o.value=[t._timestamp||1,[t._value,t._type]],"xsd:dateTime"===t._type&&(o.value[1][0]=+o.value[1][0]),t._object=!1),null!=t._writable&&(o.writable=[r||1,t._writable?1:0]),null!=t._object&&(o.object=[i,t._object?1:0]),s.push([Path.parse(n.slice(0,-1)),i,o]);for(const[s,r]of Object.entries(t))s.startsWith("_")||(t._object=!0,e(r,n+s+".",a+1,t._timestamp));!t._object&&a||!t._timestamp||s.push([Path.parse(n+"*"),t._timestamp])}(n,"",0,0),s}async function saveDevice(e,t,s,n){const a={$set:{},$unset:{},$addToSet:{},$pull:{}};for(const e of t.timestamps.diff()){if(e[0].wildcard!==1<<e[0].length-1)continue;if("Events"===e[0].segments[0]||"DeviceID"===e[0].segments[0]||"Tags"===e[0].segments[0])continue;const s=t.paths.get(e[0].slice(0,-1));e[2]>n&&(e[2]=n),null==e[2]&&null!=e[1]?a.$unset[s.length?s.toString()+"._timestamp":"_timestamp"]=1:!s||s.length&&!t.attributes.has(s)||(a.$set[s.length?s.toString()+"._timestamp":"_timestamp"]=new Date(e[2]))}for(const e of t.attributes.diff()){const t=e[0],s=(((e[1]||{}).value||[])[1]||[])[0],r=(((e[2]||{}).value||[])[1]||[])[0],o=(((e[1]||{}).value||[])[1]||[])[1],i=(((e[2]||{}).value||[])[1]||[])[1],c=((e[1]||{}).value||[])[0],l=((e[2]||{}).value||[])[0],u=((e[1]||{}).object||[])[1],p=((e[2]||{}).object||[])[1],f=((e[2]||{}).writable||[])[1],d=((e[1]||{}).writable||[])[1];switch(t.segments[0]){case"Events":if(2===t.length&&r!==s)if(e[2]){const s=new Date(e[2].value[1][0]);switch(t.segments[1]){case"Inform":a.$set._lastInform=s;break;case"1_BOOT":a.$set._lastBoot=s;break;case"0_BOOTSTRAP":a.$set._lastBootstrap=s;break;case"Registered":a.$set._registered=s}}else switch(t.segments[1]){case"Inform":a.$unset._lastInform=1;break;case"1_BOOT":a.$unset._lastBoot=1;break;case"0_BOOTSTRAP":a.$unset._lastBootstrap=1;break;case"Registered":a.$unset._registered=1}break;case"DeviceID":if(r!==s){const s=e[2].value[1][0];switch(t.segments[1]){case"ID":a.$set._id=s;break;case"Manufacturer":a.$set["_deviceId._Manufacturer"]=s;break;case"OUI":a.$set["_deviceId._OUI"]=s;break;case"ProductClass":a.$set["_deviceId._ProductClass"]=s;break;case"SerialNumber":a.$set["_deviceId._SerialNumber"]=s}}break;case"Tags":r!==s&&(null!=r?(a.$addToSet._tags||(a.$addToSet._tags={$each:[]}),a.$addToSet._tags.$each.push(t.segments[1])):(a.$pull._tags||(a.$pull._tags={$in:[]}),a.$pull._tags.$in.push(t.segments[1])));break;default:if(!e[2]){a.$unset[t.toString()]=1;continue}for(const m of Object.keys(e[2]))if(e[2][m][0]>n&&(e[2][m][0]=n),null!=e[2][m][1])switch(m){case"value":r!==s&&("xsd:dateTime"===i&&Number.isInteger(r)?a.$set[t.toString()+"._value"]=new Date(r):a.$set[t.toString()+"._value"]=r),i!==o&&(a.$set[t.toString()+"._type"]=i),l!==c&&(a.$set[t.toString()+"._timestamp"]=new Date(l));break;case"object":e[1]&&e[1].object&&p===u||(a.$set[t.length?t.toString()+"._object":"_object"]=!!p);break;case"writable":e[1]&&e[1].writable&&f===d||(a.$set[t.length?t.toString()+"._writable":"_writable"]=!!f)}if(e[1])for(const s of Object.keys(e[1]))if(!(null==e[1][s][1]||e[2]&&e[2][s]&&null!=e[2][s][1])){const e=t.length?t.toString()+".":"";a.$unset[`${e}_${s}`]=1,"value"===s&&(a.$unset[e+"_type"]=1,a.$unset[e+"_timestamp"]=1)}}}a.$unset=optimizeProjection(a.$unset);for(const e of Object.keys(a.$unset))null!=a.$set[e]&&delete a.$unset[e];for(const[e,t]of Object.entries(a)){if("$addToSet"===e)for(const[e,s]of Object.entries(t))s.$each.length||delete t[e];else if("$pull"===e)for(const[e,s]of Object.entries(t))s.$in.length||delete t[e];Object.keys(t).length||delete a[e]}if(!Object.keys(a).length)return;let r;if(a.$addToSet&&a.$pull&&(r={$pull:a.$pull},delete a.$pull),1!==(await devicesCollection.updateOne({_id:e},a,{upsert:s})).result.n)throw new Error(`Device ${e} not found in database`);r&&await devicesCollection.updateOne({_id:e},r)}async function getFaults(e){const t=await faultsCollection.find({_id:{$regex:`^${escapeRegExp(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1);delete n._id,delete n.channel,delete n.device,n.timestamp=+n.timestamp,n.provisions=JSON.parse(n.provisions),s[t]=n}return s}async function saveFault(e,t,s){const n=`${e}:${t}`;(s=Object.assign({},s))._id=n,s.device=e,s.channel=t,s.timestamp=new Date(s.timestamp),s.provisions=JSON.stringify(s.provisions),await faultsCollection.replaceOne({_id:n},s,{upsert:!0})}async function deleteFault(e,t){await faultsCollection.deleteOne({_id:`${e}:${t}`})}async function getDueTasks(e,t){const s=tasksCollection.find({device:e}).sort(["timestamp"]),n=[];for await(const e of s){if(e.timestamp&&(e.timestamp=+e.timestamp),e.expiry&&(e.expiry=+e.expiry),e.timestamp>=t)return[n,+e.timestamp];if(e._id=String(e._id),n.push(e),"download"===e.name&&e.file){let t;t=mongodb.ObjectID.isValid(e.file)?{_id:{$in:[e.file,new mongodb.ObjectID(e.file)]}}:{_id:e.file};const s=await filesCollection.find(t).toArray();s[0]&&(e.fileType||(e.fileType=s[0].metadata.fileType),e.fileName||(e.fileName=s[0].filename||s[0]._id.toString()))}}return[n,null]}async function clearTasks(e,t){await tasksCollection.deleteMany({_id:{$in:t.map(e=>new mongodb.ObjectID(e))}})}async function getOperations(e){const t=await operationsCollection.find({_id:{$regex:`^${escapeRegExp(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1);delete n._id,n.timestamp=+n.timestamp,n.args&&(n.args=JSON.parse(n.args)),n.provisions=JSON.parse(n.provisions),n.retries=JSON.parse(n.retries),s[t]=n}return s}async function saveOperation(e,t,s){const n=`${e}:${t}`;(s=Object.assign({},s))._id=n,s.timestamp=new Date(s.timestamp),s.provisions=JSON.stringify(s.provisions),s.retries=JSON.stringify(s.retries),s.args=JSON.stringify(s.args),await operationsCollection.replaceOne({_id:n},s,{upsert:!0})}async function deleteOperation(e,t){await operationsCollection.deleteOne({_id:`${e}:${t}`})}async function getPresets(){return presetsCollection.find().toArray()}async function getObjects(){return objectsCollection.find().toArray()}async function getProvisions(){return provisionsCollection.find().toArray()}async function getVirtualParameters(){return virtualParametersCollection.find().toArray()}function getFiles(){return filesCollection.find().toArray()}async function getConfig(){return(await configCollection.find().toArray()).map(e=>({id:e._id,value:parse(e.value)}))}async function getPermissions(){return permissionsCollection.find().toArray()}async function getUsers(){return usersCollection.find().toArray()}const MAX_CACHE_TTL=+get("MAX_CACHE_TTL");let clientPromise$1,mongoCollection,mongoTimeOffset=0;async function connect$1(){const e=""+get("MONGODB_CONNECTION_URL");clientPromise$1=mongodb.MongoClient.connect(e,{useNewUrlParser:!0});const t=(await clientPromise$1).db();mongoCollection=t.collection("cache"),await mongoCollection.createIndex({expire:1},{expireAfterSeconds:0});const s=Date.now(),n=await t.command({hostInfo:1});mongoTimeOffset=n.system.currentTime.getTime()-s}async function disconnect$1(){clientPromise$1&&await(await clientPromise$1).close()}async function get$1(e){const t=new Date(Date.now()-mongoTimeOffset);if(Array.isArray(e)){const s=await mongoCollection.find({_id:{$in:e}}).toArray(),n={};e.forEach((e,t)=>{n[e]=t});const a=[];return s.forEach(e=>{e.expire>t&&(a[n[e._id]]=e.value)}),a}{const s=await mongoCollection.findOne({_id:{$in:[e]}});return s&&s.expire>t?s.value:null}}async function set$1(e,t,s=MAX_CACHE_TTL){const n=new Date(Date.now()-mongoTimeOffset+1e3*s);await mongoCollection.replaceOne({_id:e},{_id:e,value:t,expire:n},{upsert:!0})}async function pop(e){const t=await mongoCollection.findOneAndDelete({_id:e});return t&&t.value&&+t.value.expire-(Date.now()-mongoTimeOffset)?t.value.value:null}async function lock(e,t){const s=Math.random().toString(36).slice(2);const n=new Date(Date.now()-mongoTimeOffset),a=new Date(Date.now()-mongoTimeOffset+1e3*t);try{await mongoCollection.updateOne({_id:e,expire:{$lte:n}},{$set:{value:s,expire:a}},{upsert:!0})}catch(s){if(s&&11e3===s.code)return await new Promise(e=>setTimeout(e,200)),lock(e,t)}return async function(t){if(t){const n=new Date(Date.now()-mongoTimeOffset+1e3*t);if(1!==(await mongoCollection.updateOne({_id:e,value:s},{expire:n})).result.n)throw new Error("Lock expired")}else if(1!==(await mongoCollection.deleteOne({_id:e,value:s})).result.n)throw new Error("Lock expired")}}const isArray=Array.isArray,regExpCache=new WeakMap,REDUCE_SKIP={};function reduce(e,t){let s=!0;for(;s;){s=!1;for(let n=2;n<e.length;++n){const a=t(e[n-1],e[n],n-2);a!==REDUCE_SKIP&&(s=!0,(e=e.slice()).splice(n-1,2,a))}}return 2===e.length?e[1]:e}function likePatternToRegExp(e,t="",s=""){const n={"-":"\\-","/":"\\/","\\":"\\/","^":"\\^",$:"\\$","*":"\\*","+":"\\+","?":"\\?",".":"\\.","(":"\\(",")":"\\)","|":"\\|","[":"\\[","]":"\\]","{":"\\{","}":"\\}","\\%":".*","\\_":"."};let a=parseLikePattern(e,t);if(!a.length)return new RegExp("^$",s);(a=a.map(e=>n[e]||e))[0]=".*"===a[0]?"":"^"+a[0];const r=a.length-1;return a[r]=[".*",""].includes(a[r])?"":a[r]+"$",new RegExp(a.join(""),s)}function evalExp(e){if("AND"===e[0])return reduce(e,(e,t)=>isArray(e)?isArray(t)?REDUCE_SKIP:t?e:t:e?t:e);if("OR"===e[0])return reduce(e,(e,t)=>isArray(e)?isArray(t)?REDUCE_SKIP:t||e:e||t);if("NOT"===e[0]){if(!isArray(e[1]))return!e[1];if("NOT"===e[1][0])return e[1][1]}else{if("IS NULL"===e[0])return isArray(e[1])?e:null==e[1]||null;if("IS NOT NULL"===e[0])return isArray(e[1])?e:null!=e[1]||null;if("LIKE"===e[0]){if(isArray(e[1])||isArray(e[2])||isArray(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=regExpCache.get(e);return t||(t=likePatternToRegExp(e[2],e[3]),regExpCache.set(e,t)),t.test(e[1])}if("NOT LIKE"===e[0]){if(isArray(e[1])||isArray(e[2])||isArray(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=regExpCache.get(e);return t||(t=likePatternToRegExp(e[2],e[3]),regExpCache.set(e,t)),!t.test(e[1])}if("="===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]===e[2];if("<>"===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]!==e[2];if(">"===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]>e[2];if(">="===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]>=e[2];if("<"===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]<e[2];if("<="===e[0])return isArray(e[1])||isArray(e[2])?e:null==e[1]||null==e[2]?null:e[1]<=e[2];if("*"===e[0])return reduce(e,(e,t)=>isArray(e)||isArray(t)?REDUCE_SKIP:null==e||null==t?null:e*t);if("/"===e[0])return reduce(e,(e,t,s)=>isArray(e)||isArray(t)?REDUCE_SKIP:null==e||null==t?null:0===s?e/t:e*t);if("+"===e[0])return reduce(e,(e,t)=>isArray(e)||isArray(t)?REDUCE_SKIP:null==e||null==t?null:e+t);if("-"===e[0])return reduce(e,(e,t,s)=>isArray(e)||isArray(t)?REDUCE_SKIP:null==e||null==t?null:0===s?e-t:e+t);if("||"===e[0])return reduce(e,(e,t)=>isArray(e)||isArray(t)?REDUCE_SKIP:null==e||null==t?null:`${e}${t}`)}return e}function evaluate(e,t,s,n){return map(e,e=>{if(n&&(e=n(e)),!isArray(e))return e;if("FUNC"===e[0]){if("NOW"===e[1]){if(s)return s}else if("UPPER"===e[1]){if(null==e[2])return null;if(!isArray(e[2]))return`${e[2]}`.toUpperCase()}else if("LOWER"===e[1]){if(null==e[2])return null;if(!isArray(e[2]))return`${e[2]}`.toLowerCase()}}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!isArray(e[1])){let s;return null==(s="function"==typeof t?t(e[1]):t[e[1]])?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return evalExp(e)})}async function evaluateAsync(e,t,s,n){return mapAsync(e,async e=>{if(n&&(e=await n(e)),!isArray(e))return e;if("FUNC"===e[0]){if("NOW"===e[1]){if(s)return s}else if("UPPER"===e[1]){if(null==e[2])return null;if(!isArray(e[2]))return`${e[2]}`.toUpperCase()}else if("LOWER"===e[1]){if(null==e[2])return null;if(!isArray(e[2]))return`${e[2]}`.toLowerCase()}}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!isArray(e[1])){let s=t[e[1]];return null==s?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return evalExp(e)})}function extractParams(e){const t=new Set;return map(e,e=>(isArray(e)&&"PARAM"===e[0]&&t.add(e[1]),e)),Array.from(t)}const isArray$1=Array.isArray;function mongoQueryToFilter(e){return!Object.keys(e).length||function e(t){const s=[];for(const[n,a]of Object.entries(t))if("$"===n[0])if("$and"===n){const t=["AND"];for(const s of Object.values(a))t.push(e(s));s.push(t)}else{if("$or"!==n)throw new Error(`Operator ${n} not supported`);{const t=["OR"];for(const s of Object.values(a))t.push(e(s));s.push(t)}}else if("_tags"===n)if("object"==typeof a){if(isArray$1(a))throw new Error("Invalid type");if(a.hasOwnProperty("$ne"))s.push(["IS NULL",["PARAM",`Tags.${a.$ne}`]]);else{if(!a.hasOwnProperty("$eq"))throw new Error("Invalid tag query");s.push(["IS NOT NULL",["PARAM",`Tags.${a.$eq}`]])}}else s.push(["IS NOT NULL",["PARAM",`Tags.${a}`]]);else if(n.startsWith("Tags.")){let e;if("boolean"==typeof a)e=a;else if(a.hasOwnProperty("$eq"))e=!!a.$eq;else if(a.hasOwnProperty("$ne"))e=!a.$ne;else{if(!a.hasOwnProperty("$exists"))throw new Error("Invalid tag query");e=!!a.$exists}s.push([e?"IS NOT NULL":"IS NULL",["PARAM",n]])}else if("object"==typeof a){if(isArray$1(a))throw new Error("Invalid type");const e=[];for(const[t,s]of Object.entries(a)){let a;switch(t){case"$eq":a="=";break;case"$ne":a="<>";break;case"$lt":a="<";break;case"$lte":a="<=";break;case"$gt":a=">";break;case"$gte":a=">=";break;default:throw new Error(`Operator ${t} not supported`)}e.push([a,["PARAM",n],s])}if(1===e.length)s.push(e[0]);else{const t=["AND"];s.push(t.concat(e))}}else s.push(["=",["PARAM",n],a]);if(1===s.length)return s[0];return["AND"].concat(s)}(e)}const REFRESH=3e3,EVICT_TIMEOUT=6e4,snapshots=new Map;let currentSnapshot=null,nextRefresh=1;function computeHash(e){const t=crypto.createHash("md5");for(const s of e.presets)t.update(JSON.stringify(s.name)),t.update(JSON.stringify(s.channel)),t.update(JSON.stringify(s.schedule)),t.update(JSON.stringify(s.events)),t.update(JSON.stringify(s.precondition)),t.update(JSON.stringify(s.provisions));let s;s=Object.keys(e.provisions).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.provisions[n].md5);s=Object.keys(e.virtualParameters).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.virtualParameters[n].md5);s=Object.keys(e.config).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.config[n]));s=Object.keys(e.files).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.files[n]));s=Object.keys(e.users).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.users[n]));const n=Object.keys(e.permissions).sort();t.update(JSON.stringify(n));for(const a of n){const n=Object.keys(e.permissions[a]).sort();t.update(JSON.stringify(n));for(const r of n){s=Object.keys(e.permissions[a][r]).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.permissions[a][r][n]))}}return t.digest("hex")}function flattenObject(e,t="",s={}){for(const n of Object.keys(e)){const a=e[n];"object"!=typeof a||Array.isArray(a)?s[`${t}${n}`]=a:flattenObject(a,`${t}${n}.`,s)}return s}async function fetchPresets(){const e=await getPresets();let t=await getObjects();t=t.map(e=>((e=flattenObject(e))._keys&&e._keys.length||(e._keys=Object.keys(e).filter(e=>!e.startsWith("_"))),e)),e.sort((e,t)=>e.weight===t.weight?e._id>t._id?1:e._id<t._id?-1:0:e.weight-t.weight);const s=[];for(const n of e){let e=null;if(n.schedule){const t=n.schedule.trim().split(/\s+/);e={md5:crypto.createHash("md5").update(n.schedule).digest("hex"),duration:null,schedule:null};try{e.duration=1e3*+t.shift(),e.schedule=parseCron(t.join(" "))}catch(t){warn({message:"Invalid preset schedule",preset:n._id,schedule:n.schedule}),e.schedule=!1}}const a=n.events||{};let r=!0;if(n.precondition){try{r=parse(n.precondition)}catch(e){r=mongoQueryToFilter(JSON.parse(n.precondition))}r=evaluate(r)}const o=n.provisions||[];for(const e of n.configurations)switch(e.type){case"age":o.push(["refresh",e.name,e.age]);break;case"value":o.push(["value",e.name,e.value]);break;case"add_tag":o.push(["tag",e.tag,!0]);break;case"delete_tag":o.push(["tag",e.tag,!1]);break;case"provision":o.push([e.name].concat(e.args||[]));break;case"add_object":for(const s of t)if(s._id===e.object){const t=s._keys.map(e=>`${e}:${JSON.stringify(s[e])}`).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,1]);for(const e in s)e.startsWith("_")||-1!==s._keys.indexOf(e)||o.push(["value",`${n}.${e}`,s[e]])}break;case"delete_object":for(const s of t)if(s._id===e.object){const t=s._keys.map(e=>`${e}:${JSON.stringify(s[e])}`).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,0])}break;default:throw new Error(`Unknown configuration type ${e.type}`)}s.push({name:n._id,channel:n.channel||"default",schedule:e,events:a,precondition:r,provisions:o})}return s}async function fetchProvisions(){const e=await getProvisions(),t={};for(const s of e)t[s._id]={},t[s._id].md5=crypto.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new vm.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function fetchVirtualParameters(){const e=await getVirtualParameters(),t={};for(const s of e)t[s._id]={},t[s._id].md5=crypto.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new vm.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function fetchPermissions(){const e=await getPermissions(),t={};for(const s of e)t[s.role]||(t[s.role]={}),t[s.role][s.access]||(t[s.role][s.access]={}),t[s.role][s.access][s.resource]={access:s.access,filter:parse(s.filter||"true")},s.validate&&(t[s.role][s.access][s.resource].validate=parse(s.validate));return t}async function fetchFiles(){const e=await getFiles(),t={};for(const s of e){const e=s.filename||s._id.toString();t[e]={},t[e].length=s.length,t[e].md5=s.md5,t[e].contentType=s.contentType}return t}async function fetchUsers(){const e=await getUsers(),t={};for(const s of e)t[s._id]={password:s.password,salt:s.salt,roles:s.roles.split(",").map(e=>e.trim())};return t}async function fetchConfig(){const e=await getConfig();e.sort((e,t)=>e.id>t.id?1:e.id<t.id?-1:0);const t={filters:{},device:{},index:{},overview:{}},s={};for(const n of e){const e=evaluate(n.value);if(s[n.id]=e,n.id.startsWith("ui.")){const s=n.id.split(".");s.shift();let a=t;for(;s.length>1;){const e=s.shift();"object"!=typeof a[e]&&(a[e]={}),a=a[e]}a[s[0]]=e}}return[s,t]}async function refresh(){if(!nextRefresh)return await new Promise(e=>setTimeout(e,20)),void await refresh();nextRefresh=0;const e=Date.now(),t=await get$1("presets_hash");if(currentSnapshot&&t===currentSnapshot)return void(nextRefresh=e+(REFRESH-e%REFRESH));const s=await lock("presets_hash_lock",3),n=await Promise.all([fetchPresets(),fetchProvisions(),fetchVirtualParameters(),fetchFiles(),fetchPermissions(),fetchUsers(),fetchConfig()]),a={presets:n[0],provisions:n[1],virtualParameters:n[2],files:n[3],permissions:n[4],users:n[5],config:n[6][0],ui:n[6][1]};if(currentSnapshot){const e=currentSnapshot,t=snapshots.get(e);setTimeout(()=>{snapshots.get(e)===t&&snapshots.delete(e)},EVICT_TIMEOUT).unref()}currentSnapshot=computeHash(a),snapshots.set(currentSnapshot,a),await set$1("presets_hash",currentSnapshot,300),await s(0),nextRefresh=e+(REFRESH-e%REFRESH)}async function getCurrentSnapshot(){return Date.now()>nextRefresh&&await refresh(),currentSnapshot}function getPresets$1(e){const t=snapshots.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.presets}function getProvisions$1(e){const t=snapshots.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.provisions}function getVirtualParameters$1(e){const t=snapshots.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.virtualParameters}function getFiles$1(e){const t=snapshots.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.files}function getConfig$1(e,t,s,n,a){const r=snapshots.get(e);if(!r)throw new Error("Cache snapshot does not exist");const o={"cwmp.downloadTimeout":"DOWNLOAD_TIMEOUT","cwmp.debug":"DEBUG","cwmp.retryDelay":"RETRY_DELAY","cwmp.sessionTimeout":"SESSION_TIMEOUT","cwmp.connectionRequestTimeout":"CONNECTION_REQUEST_TIMEOUT","cwmp.gpnNextLevel":"GPN_NEXT_LEVEL","cwmp.gpvBatchSize":"GPV_BATCH_SIZE","cwmp.cookiesPath":"COOKIES_PATH","cwmp.datetimeMilliseconds":"DATETIME_MILLISECONDS","cwmp.booleanLiteral":"BOOLEAN_LITERAL","cwmp.connectionRequestAllowBasicAuth":"CONNECTION_REQUEST_ALLOW_BASIC_AUTH","cwmp.maxCommitIterations":"MAX_COMMIT_ITERATIONS","cwmp.deviceOnlineThreshold":"DEVICE_ONLINE_THRESHOLD","cwmp.udpConnectionRequestPort":"UDP_CONNECTION_REQUEST_PORT"};if(!(t in r.config)){if(t in o){let e;return s&&s.id?e=s.id:a&&(e=a(["PARAM","DeviceID.ID"]),Array.isArray(e)&&(e=null)),get(o[t],e)}return null}const i=evaluate(r.config[t],s,n,a);return Array.isArray(i)?null:i}function getConfigExpression(e,t){const s=snapshots.get(e);if(!s)throw new Error("Cache snapshot does not exist");return s.config[t]}const MAX_DEPTH=+get("MAX_DEPTH");function refresh$1(e,t,s){if(!(2===t.length&&"string"==typeof t[1]||3===t.length&&"string"==typeof t[1]&&"number"==typeof t[2]))throw new Error("Invalid arguments");const n=Path.parse(t[1]).segments.slice(),a=n.length;n.length=MAX_DEPTH,n.fill("*",a);const r=Path.parse(n.join(".")),o=1e3*(t[2]||1),i=variance(e.deviceId,o),c=interval$1(e.timestamp,o,i);for(let e=a;e<r.length;++e)s.push({path:r.slice(0,e),pathGet:c,pathSet:null,attrGet:{object:1,writable:1,value:c},attrSet:null,defer:!0});return!0}function value(e,t,s){if(3!==t.length||"string"!=typeof t[1])throw new Error("Invalid arguments");return s.push({path:Path.parse(t[1]),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[t[2]]},defer:!0}),!0}function tag(e,t,s){if(3!==t.length||"string"!=typeof t[1]||"boolean"!=typeof t[2])throw new Error("Invalid arguments");return s.push({path:Path.parse(`Tags.${t[1]}`),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[t[2]]},defer:!0}),!0}function reboot(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:Path.parse("Reboot"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0}function reset(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:Path.parse("FactoryReset"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0}function download(e,t,s){if(!(3===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]||4===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]&&"string"==typeof t[3]))throw new Error("Invalid arguments");const n=[`FileType:${JSON.stringify(t[1]||"")}`,`FileName:${JSON.stringify(t[2]||"")}`,`TargetFileName:${JSON.stringify(t[3]||"")}`].join(",");return s.push({path:Path.parse(`Downloads.[${n}]`),pathGet:1,pathSet:1,attrGet:null,attrSet:null,defer:!0}),s.push({path:Path.parse(`Downloads.[${n}].Download`),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0}function instances(e,t,s,n,a){if(3!==t.length||"string"!=typeof t[1])throw new Error("Invalid arguments");let r=Number(t[2]);if(Number.isNaN(r))throw new Error("Invalid arguments");const o=Path.parse(t[1]);if("+"===t[2][0]||"-"===t[2][0]){if(s.push({path:o,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0}),a===n)return!1;const t=unpack(e.deviceData,o,n+1);r=Math.max(0,t.length+r)}return s.push({path:o,pathGet:1,pathSet:r,attrGet:null,attrSet:null,defer:!0}),!0}const defaultProvisions=Object.freeze({refresh:refresh$1,value:value,tag:tag,reboot:reboot,reset:reset,download:download,instances:instances}),WILDCARD_MULTIPLIER=2,UNDISCOVERED_DEPTH=7;function estimateGpnCount(e,t=0){const s={},n=[];let a=!1,r=0;for(const o of e){const e=o[0],i=o[1]>>t,c=e.segments[t];if(c){if(1&i){if(r=1,t>UNDISCOVERED_DEPTH)continue}else"*"===c&&(a=!0);"*"===c?n.push(o):(s[c]=s[c]||[],s[c].push(o))}else 1&i&&(r=1)}let o=0;!a&&n.length&&(o+=estimateGpnCount(n,t+1)*WILDCARD_MULTIPLIER);for(const e of Object.keys(s)){const a=estimateGpnCount(s[e].concat(n),t+1);o-=a,r+=a}return r+=Math.max(0,o)}class PathSet{constructor(){this.lengthIndex=[],this.fragmentIndex=[],this.stringIndex=new Map}get depth(){return this.lengthIndex.length}add(e){if(e.alias)throw new Error("PathSet does not support aliased paths");const t=this.get(e);if(t)return t;for(this.stringIndex.set(e.toString(),e);this.lengthIndex.length<=e.length;)this.lengthIndex.push(new Set),this.lengthIndex.length>1&&this.fragmentIndex.push(new Map);this.lengthIndex[e.length].add(e);for(let t=0;t<e.length;++t){const s=e.segments[t],n=this.fragmentIndex[t];let a=n.get(s);a||(a=new Set,n.set(s,a)),a.add(e)}return e}get(e){return this.stringIndex.get(e.toString())||null}find(e,t=!1,s=!1,n=e.length){if(e.alias)throw new Error("PathSet does not support aliased paths");const a=e.length;if(!(t||n!==a||s&&e.wildcard)){const t=this.get(e);return t?[t]:[]}const r=this.lengthIndex.slice(a,n+1);if(!r.length)return[];let o;for(let n=a-1;n>=0;--n){let a;const r=this.fragmentIndex[n];if(e.wildcard>>n&1){if(s)continue}else t&&(a=r.get("*"));const i=e.segments[n],c=r.get(i);if(c)o=a?o?o.filter(e=>c.has(e)||a.has(e)):[...c,...a]:o?o.filter(e=>c.has(e)):[...c];else{if(!a)return[];o=o?o.filter(e=>a.has(e)):[...a]}if(!o.length)return o}return o=o?o.filter(e=>r.some(t=>t.has(e))):[].concat(...r.map(e=>[...e]))}}const NONEXISTENT=Symbol(),UNDEFINED$1=void 0;class VersionedMap{constructor(){this._sizeDiff=[0],this._revision=0,this.map=new Map,this.dirty=0}get size(){return this.map.size+this._sizeDiff[this.revision]}get revision(){return this._revision}set revision(e){for(let t=this._sizeDiff.length;t<=e;++t)this._sizeDiff[t]=this._sizeDiff[t-1];this._revision=e}get(e,t=this._revision){const s=this.map.get(e);if(!s)return UNDEFINED$1;const n=s[Math.min(s.length-1,t)];return n===NONEXISTENT?UNDEFINED$1:n}has(e,t=this._revision){const s=this.map.get(e);return!!s&&s[Math.min(s.length-1,t)]!==NONEXISTENT}set(e,t,s=this._revision){let n=this.map.get(e);if(!n){this.dirty|=1<<s;for(let e=0;e<s;++e)this._sizeDiff[e]-=1;n=[];for(let e=0;e<s;++e)n[e]=NONEXISTENT;return n[s]=t,this.map.set(e,n),this}if(s<n.length-1)return null;const a=n[n.length-1];this.dirty|=1<<s,a===NONEXISTENT&&++this._sizeDiff[s];for(let e=n.length;e<s;++e)n[e]=a;return n[s]=t,this}delete(e,t=this._revision){const s=this.map.get(e);if(!s)return!1;if(t<s.length-1)return null;const n=s[s.length-1];if(n===NONEXISTENT)return!1;this.dirty|=1<<t,--this._sizeDiff[t];for(let e=s.length;e<t;++e)s[e]=n;return s[t]=NONEXISTENT,!0}getRevisions(e){const t=this.map.get(e);if(!t)return null;const s={};let n=NONEXISTENT;for(const[e,a]of t.entries())a!==n&&(a===NONEXISTENT?s.delete|=1<<e:s[e]=a,n=a);return s}setRevisions(e,t){const s=t.delete||0,n=Object.keys(t).reduce((e,t)=>"delete"===t?e:e|1<<+t,s),a=[];let r=NONEXISTENT;for(let e=0;n>>e;++e){let n=r;s&1<<e?n=NONEXISTENT:e in t&&(n=t[e]),n!==r&&(this.dirty|=1<<e),a[e]=n,r=n}this.map.set(e,a)}getDiff(e){const t=this.map.get(e);if(!t)return[UNDEFINED$1,UNDEFINED$1];let s=t[0];s===NONEXISTENT&&(s=UNDEFINED$1);let n=t[t.length-1];return n===NONEXISTENT&&(n=UNDEFINED$1),[s,n]}*diff(){for(const[e,t]of this.map){let s=t[0],n=t[t.length-1];s===NONEXISTENT&&n===NONEXISTENT||(s===NONEXISTENT&&(s=UNDEFINED$1),n===NONEXISTENT&&(n=UNDEFINED$1),yield[e,s,n])}}collapse(e){if(this._sizeDiff.length<=e)return;this._sizeDiff[e]=this._sizeDiff[this._sizeDiff.length-1],this._sizeDiff.splice(e+1,this._sizeDiff.length);const t=this.dirty>>e;this.dirty=this.dirty^t<<e,this.dirty|=+!!t<<e;for(const[t,s]of this.map){const n=s.length-1;if(n<=e)continue;const a=s[n];s.splice(e,n-e),a!==NONEXISTENT||s.some(e=>e!==NONEXISTENT)||this.map.delete(t)}}}class InstanceSet{constructor(){this.set=new Set}add(e){this.set.add(e)}delete(e){this.set.delete(e)}superset(e){const t=[];for(const s of this.set){let n=!0;for(const t in e)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return n.length-s.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0}),t}subset(e){const t=[];for(const s of this.set){let n=!0;for(const t in s)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return s.length-n.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0}),t}[Symbol.iterator](){return this.set.values()}forEach(e){this.set.forEach(e)}values(){return this.set.values()}clear(){this.set.clear()}get size(){return this.set.size}}const VALID_PARAM_TYPES=new Set(["xsd:int","xsd:unsignedInt","xsd:boolean","xsd:string","xsd:dateTime","xsd:base64","xsd:hexBinary"]);function initDeviceData(){return{paths:new PathSet,timestamps:new VersionedMap,attributes:new VersionedMap,trackers:new Map,changes:new Set}}function init$1(e,t,s){return{timestamp:Date.now(),deviceId:e,deviceData:initDeviceData(),cwmpVersion:t,timeout:s,provisions:[],channels:{},virtualParameters:[],revisions:[0],rpcCount:0,iteration:0,cycle:0,extensionsCache:{},declarations:[],state:0,authState:0}}function generateRpcId(e){return e.timestamp.toString(16)+("0"+e.cycle.toString(16)).slice(-2)+("0"+e.rpcCount.toString(16)).slice(-2)}function configContextCallback(e,t){if(!Array.isArray(t))return t;if("PARAM"===t[0]){let s=t[1];if("id"===s)s="DeviceID.ID";else if("serialNumber"===s)s="DeviceID.SerialNumber";else if("productClass"===s)s="DeviceID.ProductClass";else if("oui"===s)s="DeviceID.OUI";else if("remoteAddress"===s)return getRequestOrigin(e.httpRequest).remoteAddress;const n=e.deviceData,a=n.paths.get(Path.parse(s));if(a){const e=n.attributes.get(a,1);if(e&&e.value&&e.value[1])return e.value[1][0]}}else if("FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1])return getRequestOrigin(e.httpRequest).remoteAddress;return t}async function inform(e,t){const s=e.timestamp+e.iteration+1,n=[[Path.parse("DeviceID.Manufacturer"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.Manufacturer,"xsd:string"]]}],[Path.parse("DeviceID.OUI"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.OUI,"xsd:string"]]}],[Path.parse("DeviceID.ProductClass"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.ProductClass,"xsd:string"]]}],[Path.parse("DeviceID.SerialNumber"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.SerialNumber,"xsd:string"]]}]];for(const e of t.parameterList){const t=Path.parse(e[0]);n.push([t,s,{object:[s,0],value:[s,e.slice(1)]}])}n.push([Path.parse("Events.Inform"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);for(const a of t.event)n.push([Path.parse(`Events.${a.replace(/\s+/g,"_")}`),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);e.new&&(n.push([Path.parse("DeviceID.ID"),s,{object:[s,0],writable:[s,0],value:[s,[e.deviceId,"xsd:string"]]}]),n.push([Path.parse("Events.Registered"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}])),e.deviceData.timestamps.revision=1,e.deviceData.attributes.revision=1;let a=null;for(const t of n)"Events"===t[0].segments[0]?set(e.deviceData,t[0],t[1],t[2]):a=set(e.deviceData,t[0],t[1],t[2],a);if(a)for(const t of a)clear(e.deviceData,t[0],t[1],t[2],t[3]);return{name:"InformResponse"}}async function transferComplete(e,t){const s=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=s,e.deviceData.attributes.revision=s;const n=t.commandKey,a=e.operations[n];if(!a)return{acsResponse:{name:"TransferCompleteResponse"},operation:null,fault:null};const r=a.args.instance;if(delete e.operations[n],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[n]=1,t.faultStruct&&"0"!==t.faultStruct.faultCode){return await revertDownloadParameters(e,a.args.instance),{acsResponse:{name:"TransferCompleteResponse"},operation:a,fault:{code:`cwmp.${t.faultStruct.faultCode}`,message:t.faultStruct.faultString,detail:t.faultStruct,timestamp:a.timestamp}}}let o=null;const i=e.timestamp+e.iteration+1;let c;if(c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.LastDownload`)),o=set(e.deviceData,c,i,{value:[i,[a.timestamp,"xsd:dateTime"]]},o),c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.LastFileType`)),o=set(e.deviceData,c,i,{value:[i,[a.args.fileType,"xsd:string"]]},o),c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.LastFileName`)),o=set(e.deviceData,c,i,{value:[i,[a.args.fileName,"xsd:string"]]},o),c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.LastTargetFileName`)),o=set(e.deviceData,c,i,{value:[i,[a.args.targetFileName,"xsd:string"]]},o),c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.StartTime`)),o=set(e.deviceData,c,i,{value:[i,[+t.startTime,"xsd:dateTime"]]},o),c=e.deviceData.paths.add(Path.parse(`Downloads.${r}.CompleteTime`)),o=set(e.deviceData,c,i,{value:[i,[+t.completeTime,"xsd:dateTime"]]},o))for(const t of o)clear(e.deviceData,t[0],t[1],t[2],t[3]);return{acsResponse:{name:"TransferCompleteResponse"},operation:a,fault:null}}async function revertDownloadParameters(e,t){const s=e.timestamp+e.iteration+1;let n;n=e.deviceData.paths.add(Path.parse(`Downloads.${t}.LastDownload`));const a=e.deviceData.attributes.get(n);n=e.deviceData.paths.add(Path.parse(`Downloads.${t}.Download`));const r=set(e.deviceData,n,s,{value:[s,[a&&a.value[1]?a.value[1][0]:0,"xsd:dateTime"]]});if(r)for(const t of r)clear(e.deviceData,t[0],t[1],t[2],t[3])}async function timeoutOperations(e){const t=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=t,e.deviceData.attributes.revision=t;const s=[],n=[];for(const[t,a]of Object.entries(e.operations)){if("Download"!==a.name)throw new Error(`Unknown operation name ${a.name}`);const r=1e3*+getConfig$1(e.cacheSnapshot,"cwmp.downloadTimeout",{},e.timestamp,t=>configContextCallback(e,t));e.timestamp>a.timestamp+r&&(delete e.operations[t],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[t]=1,s.push({code:"timeout",message:"Download operation timed out",timestamp:a.timestamp}),n.push(a),revertDownloadParameters(e,a.args.instance))}return{faults:s,operations:n}}function addProvisions(e,t,s){const n=2*+getConfig$1(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>configContextCallback(e,t));delete e.syncState,delete e.rpcRequest,e.declarations=[],e.provisionsRet=[],e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1),e.revisions=[0],e.extensionsCache={}),e.iteration!==e.cycle*n&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*n),e.channels[t]|=0;for(const n of s){const s=[t],a=JSON.stringify(n);for(const[t,n]of e.provisions.entries())if(JSON.stringify(n)===a){e.provisions.splice(t,1);for(const n of Object.keys(e.channels)){e.channels[n]&1<<t&&s.push(n);const a=e.channels[n]>>t+1;e.channels[n]&=(1<<t)-1,e.channels[n]|=a<<t}}for(const t of s)e.channels[t]|=1<<e.provisions.length;e.provisions.push(n)}}function clearProvisions(e){const t=2*+getConfig$1(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>configContextCallback(e,t));e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1)),e.iteration!==e.cycle*t&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*t),delete e.syncState,delete e.rpcRequest,e.provisions=[],e.virtualParameters=[],e.channels={},e.declarations=[],e.provisionsRet=[],e.revisions=[0],e.extensionsCache={}}async function runProvisions(e,t,s,n){const a=getProvisions$1(e.cacheSnapshot),r=await Promise.all(t.map(async t=>{if(!a[t[0]]){if(defaultProvisions[t[0]]){const a=[];let r=!0,o=null;try{r=defaultProvisions[t[0]](e,t,a,s,n)}catch(e){o={code:`script.${e.name}`,message:e.message,detail:{name:e.name,message:e.message,stack:`${e.name}: ${e.message}\n    at ${t[0]}`}}}return{fault:o,clear:null,declare:a,done:r,returnValue:null}}return null}return run$1(a[t[0]].script,{args:t.slice(1)},e,s,n)}));let o,i=!0,c=[],l=[];for(const e of r)e&&(i=i&&e.done,e.declare&&(c=c.concat(e.declare)),e.clear&&(l=l.concat(e.clear)),o=e.fault||o);if(i)for(const e of c)e.defer=!1;return{fault:o,clear:l,declare:c,done:i,returnValue:null}}async function runVirtualParameters(e,t,s,n){const a=getVirtualParameters$1(e.cacheSnapshot),r=await Promise.all(t.map(async t=>{const r={args:t.slice(1)},o=await run$1(a[t[0]].script,r,e,s,n);if(o.done&&!o.fault){if(!o.returnValue)return o.fault={code:"script",message:"Invalid virtual parameter return value"},o;const e={};if(null!=o.returnValue.writable)e.writable=!!o.returnValue.writable;else if(null!=t[1].writable||null!=t[2].writable)return o.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'writable' attribute`},o;if(null!=o.returnValue.value){let t,s;if(Array.isArray(o.returnValue.value)?[t,s]=o.returnValue.value:t=o.returnValue.value,s||(s="number"==typeof t?"xsd:int":"boolean"==typeof t?"xsd:boolean":t instanceof Date?"xsd:datetime":"xsd:string"),null==t||!VALID_PARAM_TYPES.has(s))return o.fault={code:"script",message:"Invalid virtual parameter value attribute"},o;e.value=sanitizeParameterValue([t,s])}else if(null!=t[1].value||null!=t[2].value)return o.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'value' attribute`},o;o.returnValue=e}return o}));let o=!0;const i=[];let c,l=[],u=[];for(const e of r)e?(o=o&&e.done,e.declare&&(l=l.concat(e.declare)),e.clear&&(u=u.concat(e.clear)),i.push(e.returnValue),c=e.fault||c):i.push(null);if(o)for(const e of l)e.defer=!1;return{fault:c,clear:u,declare:l,done:o,returnValue:o?i:null}}function runDeclarations(e,t){e.syncState||(e.syncState={refreshAttributes:{exist:new Set,object:new Set,writable:new Set,value:new Set},spv:new Map,gpn:new Set,gpnPatterns:new Map,tags:new Map,virtualParameterDeclarations:[],instancesToDelete:new Map,instancesToCreate:new Map,downloadsToDelete:new Set,downloadsToCreate:new InstanceSet,downloadsValues:new Map,downloadsDownload:new Map,reboot:0,factoryReset:0});const s=new Map,n=new Map,a=new Map,r=getVirtualParameters$1(e.cacheSnapshot);function o(e,t){let s=n.get(e);if(s){s=Object.assign({},s);for(const[e,n]of Object.entries(t))s[e]=Math.max(n,s[e]||0);n.set(e,s)}else n.set(e,t)}function i(e,t,s){let n=a.get(e);n?(n=Object.assign({},n,t),a.set(e,n)):s||a.set(e,t)}for(const n of t){let t,a=n.path;if(a.length){if((1&(a.alias|a.wildcard)||"VirtualParameters"===a.segments[0])&&(e.deviceData.paths.add(Path.parse("VirtualParameters")),2&(a.alias|a.wildcard))){e.deviceData.paths.add(Path.parse("VirtualParameters.*"));for(const t of Object.keys(r))e.deviceData.paths.add(Path.parse(`VirtualParameters.${t}`))}if((1&(a.alias|a.wildcard)||"Reboot"===a.segments[0])&&e.deviceData.paths.add(Path.parse("Reboot")),(1&(a.alias|a.wildcard)||"FactoryReset"===a.segments[0])&&e.deviceData.paths.add(Path.parse("FactoryReset")),a.alias){const r=getAliasDeclarations(a,n.pathGet||1);for(const t of r){const n=e.deviceData.paths.add(t.path);let a;s.set(n,Math.max(t.pathGet||1,s.get(n)||0)),t.attrGet&&(a=Object.keys(t.attrGet),o(n,t.attrGet)),track(e.deviceData,n,"prerequisite",a)}t=unpack(e.deviceData,a);for(const e of t)s.set(e,Math.max(n.pathGet||1,s.get(e)||0)),n.attrGet&&o(e,n.attrGet)}else a=e.deviceData.paths.add(a),s.set(a,Math.max(n.pathGet||1,s.get(a)||0)),n.attrGet&&o(a,n.attrGet),track(e.deviceData,a,"prerequisite");if(n.attrSet)if(a.alias|a.wildcard){t||(t=unpack(e.deviceData,a));for(const e of t)i(e,n.attrSet,n.defer)}else i(a,n.attrSet,n.defer);if(null!=n.pathSet){let s,r;Array.isArray(n.pathSet)?(s=n.pathSet[0],r=n.pathSet[1]):s=r=n.pathSet;let o,i=a.slice(0,-1);if(Array.isArray(a.segments[a.length-1])){o={};for(const[e,t]of a.segments[a.length-1])o[e.toString()]=t}else"*"===a.segments[a.length-1]&&(o={});if(0==((a.wildcard|a.alias)&(1<<a.length-1)-1))i=e.deviceData.paths.add(i),t||(t=unpack(e.deviceData,a)),processInstances(e,i,t,o,s,r,n.defer);else{const t=unpack(e.deviceData,i);for(const i of t)processInstances(e,i,unpack(e.deviceData,i.concat(a.slice(-1))),o,s,r,n.defer)}}}}return processDeclarations(e,s,n,a)}async function rpcRequest(e,t){if(null!=e.rpcRequest)return{fault:null,rpcId:generateRpcId(e),rpc:e.rpcRequest};if(!(e.virtualParameters.length||e.declarations.length||t&&t.length||e.provisions.length))return{fault:null,rpcId:null,rpc:null};if(e.declarations.length<=e.virtualParameters.length){const s=e.declarations.length,n=(e.revisions[s]||0)+1;let a,r;e.deviceData.timestamps.revision=n,e.deviceData.attributes.revision=n,0===s?(a=runProvisions,r=e.provisions):(a=runVirtualParameters,r=e.virtualParameters[s-1]);const{fault:o,clear:i,declare:c,done:l,returnValue:u}=await a(e,r,e.revisions[s-1]||0,e.revisions[s]);if(o)return o.timestamp=e.timestamp,{fault:o,rpcId:null,rpc:null};for(const t of i)if(t[1]>e.timestamp&&(t[1]=e.timestamp),t[2])for(const[s,n]of Object.entries(t[2]))n>e.timestamp&&(t[2][s]=e.timestamp);e.declarations.push(c),e.provisionsRet[s]=s?u:l;for(const t of c)if(t.pathGet>e.timestamp&&(t.pathGet=e.timestamp),t.attrGet)for(const[s,n]of Object.entries(t.attrGet))n>e.timestamp&&(t.attrGet[s]=e.timestamp);if(i)for(const t of i)clear(e.deviceData,t[0],t[1],t[2],t[3]);return rpcRequest(e,t)}if(t&&t.length)return delete e.syncState,e.declarations[0]||(e.declarations[0]=[]),e.declarations[0]=e.declarations[0].concat(t),rpcRequest(e,null);if(e.rpcCount>=255)return{fault:{code:"too_many_rpcs",message:"Too many RPC requests",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.revisions.length>=8)return{fault:{code:"deeply_nested_vparams",message:"Virtual parameters are referencing other virtual parameters in a deeply nested manner",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.cycle>=255)return{fault:{code:"too_many_cycles",message:"Too many provision cycles",timestamp:e.timestamp},rpcId:null,rpc:null};const s=2*+getConfig$1(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>configContextCallback(e,t));if(e.iteration>=s*(e.cycle+1))return{fault:{code:"too_many_commits",message:"Too many commit iterations",timestamp:e.timestamp},rpcId:null,rpc:null};if(!(e.syncState&&e.syncState.virtualParameterDeclarations&&e.syncState.virtualParameterDeclarations.length>=e.declarations.length)){const t=e.syncState&&e.syncState.virtualParameterDeclarations?e.syncState.virtualParameterDeclarations.length:0;t===e.declarations.length-1&&(e.iteration+=2);let s=runDeclarations(e,e.declarations[t]);const n=e.timestamp+e.iteration;let a;const r=getVirtualParameters$1(e.cacheSnapshot);if(s=s.filter(t=>{if(Object.keys(r).length){if(1===t[0].length)return e.deviceData.attributes.has(t[0])||(a=set(e.deviceData,t[0],n,{object:[n,1],writable:[n,0]},a)),!1;if(2===t[0].length){if("*"===t[0].segments[1]){for(const t of Object.keys(r))a=set(e.deviceData,Path.parse(`VirtualParameters.${t}`),n,{object:[n,0]},a);return a=set(e.deviceData,t[0],n,null,a),!1}if(r[t[0].segments[1]])return e.deviceData.attributes.has(t[0])||(a=set(e.deviceData,t[0],n,{object:[n,0]},a)),!0}}for(const s of e.deviceData.paths.find(t[0],!1,!0))if(e.deviceData.attributes.has(s)){a||(a=[]),a.push([t[0],n]);break}return!1}),a)for(const t of a)clear(e.deviceData,t[0],t[1],t[2],t[3]);return e.syncState.virtualParameterDeclarations[t]=s,rpcRequest(e,null)}if(!e.syncState)return{fault:null,rpcId:null,rpc:null};const n=e.declarations.length-1;let a=generateGetVirtualParameterProvisions(e,e.syncState.virtualParameterDeclarations[n]);if(!a&&(e.rpcRequest=generateGetRpcRequest(e),!e.rpcRequest)){if(e.deviceData.changes.has("prerequisite"))return delete e.syncState,clearTrackers(e.deviceData,"prerequisite"),rpcRequest(e,null);let t;const s=e.timestamp+e.iteration+1;for(const[n,a]of e.syncState.tags){const r=e.deviceData.attributes.get(n);a&&!r?t=set(e.deviceData,n,s,{object:[s,!1],writable:[s,!0],value:[s,[!0,"xsd:boolean"]]},t):r&&!a&&(t=set(e.deviceData,n,s,null,t))}let r;for(const n of e.syncState.downloadsToCreate){if(null==r){r=0;for(const t of e.deviceData.paths.find(Path.parse("Downloads.*"),!1,!0))+t.segments[1]>r&&e.deviceData.attributes.has(t)&&(r=+t.segments[1])}++r,t=set(e.deviceData,Path.parse("Downloads"),s,{object:[s,1],writable:[s,1]},t),t=set(e.deviceData,Path.parse(`Downloads.${r}`),s,{object:[s,1],writable:[s,1]},t);const a={FileType:{writable:1,value:[n.FileType||"","xsd:string"]},FileName:{writable:1,value:[n.FileName||"","xsd:string"]},TargetFileName:{writable:1,value:[n.TargetFileName||"","xsd:string"]},Download:{writable:1,value:[n.Download||0,"xsd:dateTime"]},LastFileType:{writable:0,value:["","xsd:string"]},LastFileName:{writable:0,value:["","xsd:string"]},LastTargetFileName:{writable:0,value:["","xsd:string"]},LastDownload:{writable:0,value:[0,"xsd:dateTime"]},StartTime:{writable:0,value:[0,"xsd:dateTime"]},CompleteTime:{writable:0,value:[0,"xsd:dateTime"]}};for(const[n,o]of Object.entries(a))t=set(e.deviceData,Path.parse(`Downloads.${r}.${n}`),s,{object:[s,0],writable:[s,o.writable],value:[s,o.value]},t);t=set(e.deviceData,Path.parse(`Downloads.${r}.*`),s,null,t)}e.syncState.downloadsToCreate.clear();for(const n of e.syncState.downloadsToDelete){t=set(e.deviceData,n,s,null,t);for(const t of e.syncState.downloadsValues.keys())t.segments[1]===n.segments[1]&&e.syncState.downloadsValues.delete(t)}e.syncState.downloadsToDelete.clear();for(const[n,a]of e.syncState.downloadsValues){const r=e.deviceData.attributes.get(n);if(r&&r.writable&&r.writable[1]&&r.value){const o=sanitizeParameterValue([a,r.value[1][1]]);o[0]!==r.value[1][0]&&(t=set(e.deviceData,n,s,{value:[s,o]},t))}}if(t||e.deviceData.changes.has("prerequisite")){if(t)for(const s of t)clear(e.deviceData,s[0],s[1],s[2],s[3]);return rpcRequest(e,null)}(a=generateSetVirtualParameterProvisions(e,e.syncState.virtualParameterDeclarations[n]))||(e.rpcRequest=generateSetRpcRequest(e))}if(a)return e.virtualParameters.push(a),e.revisions.push(e.revisions[n]),rpcRequest(e,null);if(e.rpcRequest)return{fault:null,rpcId:generateRpcId(e),rpc:e.rpcRequest};++e.revisions[n],e.declarations.pop(),e.syncState.virtualParameterDeclarations.pop();const r=e.provisionsRet.splice(n)[0];if(!r)return rpcRequest(e,null);e.revisions.pop();const o=e.revisions[e.revisions.length-1]||0;e.deviceData.timestamps.collapse(o+1),e.deviceData.attributes.collapse(o+1),e.deviceData.timestamps.revision=o+1,e.deviceData.attributes.revision=o+1;for(const t of Object.keys(e.extensionsCache))o<Number(t.split(":",1)[0])&&delete e.extensionsCache[t];const i=e.virtualParameters.pop();if(!i)return{fault:null,rpcId:null,rpc:null};const c=e.timestamp+e.iteration;let l;for(const[t,s]of r.entries()){for(const[e,n]of Object.entries(s))s[e]=[c+(null!=i[t][2][e]?1:0),n];l=set(e.deviceData,Path.parse(`VirtualParameters.${i[t][0]}`),c,s,l)}if(l)for(const t of l)clear(e.deviceData,t[0],t[1],t[2],t[3]);return rpcRequest(e,null)}function generateGetRpcRequest(e){const t=e.syncState;if(!t)return null;for(const s of t.refreshAttributes.exist){let n=!1;for(const a of e.deviceData.paths.find(s,!1,!0,99))if(t.refreshAttributes.value.has(a)||t.refreshAttributes.object.has(a)||t.refreshAttributes.writable.has(a)||t.gpn.has(a)){n=!0;break}if(!n){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}}t.refreshAttributes.exist.clear();for(const s of t.refreshAttributes.object){let n=!1;for(const a of e.deviceData.paths.find(s,!1,!0,99))if(t.refreshAttributes.value.has(a)||a.length>s.length&&(t.refreshAttributes.object.has(a)||t.refreshAttributes.writable.has(a))){n=!0;break}if(!n){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}}t.refreshAttributes.object.clear();for(const s of t.refreshAttributes.writable){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}if(t.refreshAttributes.writable.clear(),t.gpn.size){const s=getConfig$1(e.cacheSnapshot,"cwmp.gpnNextLevel",{},e.timestamp,t=>configContextCallback(e,t)),n=Array.from(t.gpn.keys()).sort((e,t)=>t.length-e.length);let a=n.pop();for(;a&&a.length&&!e.deviceData.attributes.has(a);)t.gpn.delete(a),a=n.pop();if(a){let n,r=0;if(a.length>=s){const s=[[a,0]];for(const n of e.deviceData.paths.find(a,!0,!1,99)){const e=t.gpnPatterns.get(n);e&&s.push([n,e>>a.length<<a.length])}r=estimateGpnCount(s)}if(r<Math.pow(2,Math.max(0,8-a.length)))n=!0,t.gpn.delete(a);else{n=!1;for(const s of e.deviceData.paths.find(a,!1,!0,99))t.gpn.delete(s)}return{name:"GetParameterNames",parameterPath:a.length?a.toString()+".":"",nextLevel:n}}}if(t.refreshAttributes.value.size){const s=getConfig$1(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,t=>configContextCallback(e,t)),n=[];for(const a of t.refreshAttributes.value){t.refreshAttributes.value.delete(a);const r=e.deviceData.attributes.get(a);if(r&&r.object&&0===r.object[1]&&(n.push(a.toString()),n.length>=s))break}if(n.length)return{name:"GetParameterValues",parameterNames:n}}return null}function generateSetRpcRequest(e){const t=e.syncState;if(!t)return null;const s=e.deviceData;for(const s of t.instancesToDelete.values()){const t=s.values().next().value;if(t&&e.deviceData.attributes.has(t))return{name:"DeleteObject",objectName:t.toString()+"."}}for(const[s,n]of t.instancesToCreate)if(e.deviceData.attributes.has(s)){const e=n.values().next().value;if(e)return n.delete(e),{name:"AddObject",objectName:s.toString()+".",instanceValues:e,next:"getInstanceKeys"}}const n=getConfig$1(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,t=>configContextCallback(e,t)),a=!!getConfig$1(e.cacheSnapshot,"cwmp.datetimeMilliseconds",{},e.timestamp,t=>configContextCallback(e,t)),r=!!getConfig$1(e.cacheSnapshot,"cwmp.booleanLiteral",{},e.timestamp,t=>configContextCallback(e,t)),o=[];for(const[s,r]of t.spv){t.spv.delete(s);const i=e.deviceData.attributes.get(s),c=i.value?i.value[1]:null;if(c&&i.writable&&i.writable[1]){const e=r.slice();if(e[1]||(e[1]=c[1]),sanitizeParameterValue(e),"xsd:dateTime"!==e[1]||a||"number"!=typeof e[0]||(e[0]-=e[0]%1e3),e[0]===c[0]&&e[1]===c[1]||o.push([s,e[0],e[1]]),o.length>=n)break}}if(o.length)return{name:"SetParameterValues",parameterList:o.map(e=>[e[0].toString(),e[1],e[2]]),DATETIME_MILLISECONDS:a,BOOLEAN_LITERAL:r};for(const[n,a]of t.downloadsDownload){const t=s.attributes.get(n);if(!(t&&t.value&&a<=t.value[1][0])){const t=s.attributes.get(s.paths.get(n.slice(0,-1).concat(Path.parse("FileType")))),a=s.attributes.get(s.paths.get(n.slice(0,-1).concat(Path.parse("FileName")))),r=s.attributes.get(s.paths.get(n.slice(0,-1).concat(Path.parse("TargetFileName"))));return{name:"Download",commandKey:generateRpcId(e),instance:n.segments[1],fileType:t&&t.value?t.value[1][0]:null,fileName:a&&a.value?a.value[1][0]:null,targetFileName:r&&r.value?r.value[1][0]:null}}}if(t.reboot){const s=e.deviceData.paths.get(Path.parse("Reboot")),n=s?e.deviceData.attributes.get(s):null;if(!(n&&n.value&&n.value[1][0]>=t.reboot))return delete t.reboot,{name:"Reboot"}}if(t.factoryReset){const s=e.deviceData.paths.get(Path.parse("FactoryReset")),n=s?e.deviceData.attributes.get(s):null;if(!(n&&n.value&&n.value[1][0]>=t.factoryReset))return delete t.factoryReset,{name:"FactoryReset"}}return null}function generateGetVirtualParameterProvisions(e,t){let s;if(t)for(const n of t)if(n[1]){const t={},a={},r={},o=e.deviceData.attributes.get(n[0])||{};for(const[e,t]of Object.entries(n[1]))"value"!==e&&"writable"!==e||(!o[e]||t>o[e][0])&&(r[e]=t);for(const[e,s]of Object.entries(o))t[e]=s[0],a[e]=s[1];Object.keys(r).length&&(s||(s=[]),s.push([n[0].segments[1],r,{},t,a]))}return s}function generateSetVirtualParameterProvisions(e,t){let s;if(t)for(const n of t)if(n[2]&&null!=n[2].value){const t=e.deviceData.attributes.get(n[0]);if(t&&t.writable&&t.writable[1]&&t.value&&null!=t.value[1]){const e=n[2].value.slice();if(null==e[1]&&(e[1]=t.value[1][1]),sanitizeParameterValue(e),e[0]!==t.value[1][0]||e[1]!==t.value[1][1]){s||(s=[]);const a={},r={};for(const[e,s]of Object.entries(t))a[e]=s[0],r[e]=s[1];s.push([n[0].segments[1],{},{value:e},a,r])}}}return s}function processDeclarations(e,t,s,n){const a=e.deviceData,r=e.syncState,o=e.deviceData.paths.add(Path.parse("")),i=a.paths.find(o,!1,!0,99);i.sort((e,t)=>e.wildcard===t.wildcard?e.length-t.length:e.wildcard-t.wildcard);const c=[];return(t.size||s.size||n.size)&&function e(o,i,l,u){const p=u[0],f=new Map;let d,m,h,g=0,v=0;0===p.wildcard&&(h=a.attributes.get(p));for(const e of u)if(e.length>p.length){const t=e.segments[p.length];let s=f.get(t);s||(s=e.length>p.length+1?[e.slice(0,p.length+1)]:[],f.set(t,s)),s.push(e)}else if(v=Math.max(v,a.timestamps.get(e)||0),g=Math.max(g,t.get(e)||0),0===p.wildcard){const t=s.get(e);if(t)if(d){d=Object.assign({},d);for(const[e,s]of Object.entries(t))d[e]=Math.max(s,d[e]||0)}else d=t;m=n.get(e)||m}switch(h?(o=p,null!=(i=h.object?h.object[1]:null)&&0===i&&(l=Math.max(l,h.object[0]))):l=Math.max(l,v),"*"!==p.segments[0]?p.segments[0]:o.segments[0]){case"Reboot":1===p.length&&m&&m.value&&(r.reboot=+new Date(m.value[0]));break;case"FactoryReset":1===p.length&&m&&m.value&&(r.factoryReset=+new Date(m.value[0]));break;case"Tags":2===p.length&&0===p.wildcard&&m&&m.value&&r.tags.set(p,sanitizeParameterValue([m.value[0],"xsd:boolean"])[0]);break;case"Events":case"DeviceID":break;case"Downloads":3===p.length&&0===p.wildcard&&m&&m.value&&("Download"===p.segments[2]?r.downloadsDownload.set(p,m.value[0]):r.downloadsValues.set(p,m.value[0]));break;case"VirtualParameters":if(p.length<=2){let e;if(g<=v||(e=[p]),0===p.wildcard){if(d)for(const[t,s]of Object.entries(d))h&&h[t]&&s<=h[t][0]||(e||(e=[p]),e[1]||(e[1]={}),e[1][t]=s);m&&(e||(e=[p]),e[2]=m)}e&&c.push(e)}break;default:if(g>v&&g>l)if(p===o)r.refreshAttributes.exist.add(o);else if(i)if(r.gpn.add(o),l>0){const e=1<<o.length;r.gpnPatterns.set(o,e|r.gpnPatterns.get(o))}else{const e=(1<<p.length)-1^(1<<o.length)-1;r.gpnPatterns.set(p,e|r.gpnPatterns.get(p))}else if(r.refreshAttributes.object.add(o),null==i){const e=(1<<r.gpnPatterns.size)-1^(1<<o.length)-1;r.gpnPatterns.set(p,e|r.gpnPatterns.get(p))}if(h){if(d)for(const[e,t]of Object.entries(d))h[e]&&t<=h[e][0]||("value"===e?h.object&&null!=h.object[1]?0===h.object[1]&&r.refreshAttributes.value.add(p):r.refreshAttributes.object.add(p):r.refreshAttributes[e].add(p));m&&null!=m.value&&r.spv.set(p,m.value)}}for(let[t,s]of f)if(((p.wildcard^s[0].wildcard)&(1<<p.length)-1)>>o.length==0){if("*"!==t){const e=f.get("*");e&&(s=s.concat(e))}e(o,i,l,s)}}(o,1,0,i),c}function processInstances(e,t,s,n,a,r,o){let i,c;if("Downloads"===(t=e.deviceData.paths.add(t)).segments[0]){if(1!==t.length)return;c=e.syncState.downloadsToDelete,i=e.syncState.downloadsToCreate}else null==(c=e.syncState.instancesToDelete.get(t))&&(c=new Set,e.syncState.instancesToDelete.set(t,c)),null==(i=e.syncState.instancesToCreate.get(t))&&(i=new InstanceSet,e.syncState.instancesToCreate.set(t,i));if(o&&0===i.size&&0===c.size)return;let l=0;for(const e of s)++l>r?c.add(e):l<=a&&c.delete(e);if(n){for(const e of i.superset(n))++l>r&&i.delete(e);for(const e of i.subset(n))++l<=a&&(i.delete(e),i.add(JSON.parse(JSON.stringify(n))));for(;l<a;)++l,i.add(JSON.parse(JSON.stringify(n)))}}async function rpcResponse(e,t,s){if(t!==generateRpcId(e))throw new Error("Request ID not recognized");++e.rpcCount;const n=s,a=e.rpcRequest;if(a.next){if("getInstanceKeys"===a.next){const t=[],s={};for(const[e,r]of Object.entries(a.instanceValues)){const o=`${a.objectName}${n.instanceNumber}.${e}`;t.push(o),s[o]=r}if(t.length){const n={name:"GetParameterValues",parameterNames:t,next:"setInstanceKeys",instanceValues:s};e.rpcRequest=n}else e.rpcRequest=null}else if("setInstanceKeys"===a.next){const t=[];for(const e of n.parameterList)if(e[1]!==a.instanceValues[e[0]]){const s=sanitizeParameterValue([a.instanceValues[e[0]],e[2]]);t.push([e[0],s[0],s[1]])}if(t.length){const s={name:"SetParameterValues",parameterList:t};e.rpcRequest=s}else e.rpcRequest=null}}else e.rpcRequest=null;const r=e.timestamp+e.iteration,o=(e.revisions[e.revisions.length-1]||0)+1;let i,c,l,u,p;switch(e.deviceData.timestamps.revision=o,e.deviceData.attributes.revision=o,n.name){case"GetParameterValuesResponse":if("GetParameterValues"!==a.name)throw new Error("Response name does not match request name");for(const t of n.parameterList)i=set(e.deviceData,Path.parse(t[0]),r,{object:[r,0],value:[r,t.slice(1)]},i);break;case"GetParameterNamesResponse":if("GetParameterNames"!==a.name)throw new Error("Response name does not match request name");c=a.parameterPath.endsWith(".")?Path.parse(a.parameterPath.slice(0,-1)):Path.parse(a.parameterPath),p=Path.parse("*"),u=[[c.concat(p),r]],l={};for(const e of n.parameterList){let t=e[0].length-1;for(;(t=e[0].lastIndexOf(".",t-1))>a.parameterPath.length;)l[e[0].slice(0,t)]|=0;if(e[0].endsWith(".")){l[e[0].slice(0,-1)]|=1;const t=Path.parse(e[0].slice(0,-1));a.nextLevel||u.push([t.concat(p),r]),u.push([t,r,{object:[r,1],writable:[r,e[1]?1:0]}])}else l[e[0]]|=1,u.push([Path.parse(e[0]),r,{object:[r,0],writable:[r,e[1]?1:0]}])}for(const[e,t]of Object.entries(l))if(0===t){const t=Path.parse(e);u.push([t,r,{object:[r,1],writable:[r,0]}]),u.push([t.concat(p),r])}if(u.sort((e,t)=>{let s=e[0].length,n=t[0].length;return"*"===t[0].segments[n-1]&&(n*=-1),"*"===e[0].segments[s-1]&&(s*=-1),n-s}),!c.length)for(const t of["DeviceID","Events","Tags","Reboot","FactoryReset","VirtualParameters","Downloads"]){const s=e.deviceData.paths.get(Path.parse(t));s&&e.deviceData.attributes.has(s)&&e.deviceData.timestamps.set(s,r)}for(const t of u)i=set(e.deviceData,t[0],t[1],t[2],i);if(i)for(const t of i)clear(e.deviceData,t[0],t[1],t[2],t[3]);return;case"SetParameterValuesResponse":if("SetParameterValues"!==a.name)throw new Error("Response name does not match request name");for(const t of a.parameterList)i=set(e.deviceData,Path.parse(t[0]),r+1,{object:[r+1,0],writable:[r+1,1],value:[r+1,t.slice(1)]},i);break;case"AddObjectResponse":i=set(e.deviceData,Path.parse(a.objectName+n.instanceNumber),r+1,{object:[r+1,1]},i);break;case"DeleteObjectResponse":i=set(e.deviceData,Path.parse(a.objectName.slice(0,-1)),r+1,null,i);break;case"RebootResponse":i=set(e.deviceData,Path.parse("Reboot"),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},i);break;case"FactoryResetResponse":i=set(e.deviceData,Path.parse("FactoryReset"),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},i);break;case"DownloadResponse":if(i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.Download`),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},i),0===n.status)i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.LastDownload`),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},i),i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.LastFileType`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},i),i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.LastFileName`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},i),i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.LastTargetFileName`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},i),i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.StartTime`),r+1,{value:[r+1,[+n.startTime,"xsd:dateTime"]]},i),i=set(e.deviceData,Path.parse(`Downloads.${a.instance}.CompleteTime`),r+1,{value:[r+1,[+n.completeTime,"xsd:dateTime"]]},i);else{const t={name:"Download",timestamp:e.timestamp,provisions:e.provisions,channels:e.channels,retries:{},args:{instance:a.instance,fileType:a.fileType,fileName:a.fileName,targetFileName:a.targetFileName}};for(const s of Object.keys(e.channels))null!=e.retries[s]&&(t.retries[s]=e.retries[s]);e.operations[a.commandKey]=t,e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[a.commandKey]=1}break;default:throw new Error("Response name not recognized")}if(i)for(const t of i)clear(e.deviceData,t[0],t[1],t[2],t[3])}async function rpcFault(e,t,s){const n=e.rpcRequest;if(delete e.syncState,delete e.rpcRequest,++e.rpcCount,"9005"===s.detail.faultCode){const t=e.timestamp+e.iteration,s=(e.revisions[e.revisions.length-1]||0)+1;let a;if(e.deviceData.timestamps.revision=s,e.deviceData.attributes.revision=s,"GetParameterNames"===n.name?n.parameterPath&&(a=[[Path.parse(n.parameterPath.replace(/\.$/,"")),t]]):"GetParameterValues"===n.name?a=n.parameterNames.map(e=>[Path.parse(e.replace(/\.$/,"")),t]):"SetParameterValues"===n.name?a=n.parameterList.map(e=>[Path.parse(e[0].replace(/\.$/,"")),t]):"AddObject"===n.name?a=[[Path.parse(n.objectName.replace(/\.$/,"")),t]]:"DeleteObject"===n.name&&(a=[[Path.parse(n.objectName.replace(/\.$/,"")),t]]),a)for(const t of a)clear(e.deviceData,t[0],t[1],t[2],t[3]);return null}return{code:`cwmp.${s.detail.faultCode}`,message:s.detail.faultString,detail:s.detail}}async function deserialize(e){const t=JSON.parse(e);for(const e of t.declarations)for(const t of e)t.path=Path.parse(t.path);const s=initDeviceData();for(const e of t.deviceData){const t=s.paths.add(Path.parse(e[0]));e[1]&&s.trackers.set(t,e[1]),e[2]&&(s.timestamps.setRevisions(t,e[2]),e[3]&&s.attributes.setRevisions(t,e[3]))}return t.deviceData=s,await getCurrentSnapshot(),t}async function serialize(e){const t=[];for(const s of e.deviceData.paths.find(Path.parse(""),!1,!1,99)){const n=[s.toString(),e.deviceData.trackers.get(s)||null,e.deviceData.timestamps.getRevisions(s)||null,e.deviceData.attributes.getRevisions(s)||null];t.push(n)}const s=e.declarations.map(e=>e.map(e=>Object.assign({},e,{path:e.path.toString()}))),n=Object.assign({},e,{deviceData:t,declarations:s,syncState:null,toLoad:null,httpRequest:null,httpResponse:null});return JSON.stringify(n)}const DEBUG_FILE=""+get("DEBUG_FILE"),DEBUG_FORMAT=""+get("DEBUG_FORMAT"),connectionTimestamps=new WeakMap;function getConnectionTimestamp(e){let t=connectionTimestamps.get(e);return t||(t=new Date,connectionTimestamps.set(e,t)),t}function incomingHttpRequest(e,t,s){if(!DEBUG_FILE)return;const n=new Date,a=e.connection,r={event:"incoming HTTP request",timestamp:n,remoteAddress:a.remoteAddress,deviceId:t,connection:getConnectionTimestamp(a),localPort:a.localPort,method:e.method,url:e.url,headers:e.headers,body:s};if("yaml"===DEBUG_FORMAT)fs.appendFileSync(DEBUG_FILE,"---\n"+yaml.stringify(r));else{if("json"!==DEBUG_FORMAT)throw new Error("Unrecognized DEBUG_FORMAT option");fs.appendFileSync(DEBUG_FILE,JSON.stringify(r)+"\n")}}function outgoingHttpResponse(e,t,s){if(!DEBUG_FILE)return;const n=new Date,a=e.connection,r={event:"outgoing HTTP response",timestamp:n,remoteAddress:a.remoteAddress,deviceId:t,connection:getConnectionTimestamp(a),statusCode:e.statusCode,headers:e.getHeaders(),body:s};if("yaml"===DEBUG_FORMAT)fs.appendFileSync(DEBUG_FILE,"---\n"+yaml.stringify(r));else{if("json"!==DEBUG_FORMAT)throw new Error("Unrecognized DEBUG_FORMAT option");fs.appendFileSync(DEBUG_FILE,JSON.stringify(r)+"\n")}}const gzipPromisified=util.promisify(zlib.gzip),deflatePromisified=util.promisify(zlib.deflate),REALM="GenieACS",MAX_CYCLES=4,MAX_CONCURRENT_REQUESTS=+get("MAX_CONCURRENT_REQUESTS"),currentSessions=new WeakMap,sessionsNonces=new WeakMap,stats={concurrentRequests:0,totalRequests:0,droppedRequests:0,initiatedSessions:0};async function authenticate(e,t){const s=getConfigExpression(e.cacheSnapshot,"cwmp.auth");if(!s)return!0;let n;if(e.httpRequest.headers.authorization&&(n=parseAuthorizationHeader(e.httpRequest.headers.authorization)),n&&"Digest"===n.method){const s=sessionsNonces.get(e.httpRequest.connection);if(!s||n.nonce!==s||n.qop&&(!n.cnonce||!n.nc))return!1;n.body=t}const a=await evaluateAsync(s,{},e.timestamp,async t=>{if(t=configContextCallback(e,t),Array.isArray(t)&&"FUNC"===t[0]){if("EXT"===t[1]){if("string"!=typeof t[2]||"string"!=typeof t[3])return null;for(let e=4;e<t.length;e++)if(Array.isArray(t[e]))return null;const{fault:e,value:s}=await run(t.slice(2));return e?null:s}if("AUTH"===t[1]){const e=t[2],s=t[3];if(null!=e&&null!=s&&n){if("Basic"===n.method)return n.username===t[2]&&n.password===t[3];if("Digest"===n.method){return digest(e,REALM,s,n.nonce,"POST",n.uri,n.qop,n.body,n.cnonce,n.nc)===n.response}}return!1}}return t});return!(!a||Array.isArray(a))}async function writeResponse(e,t,s=!1){s&&(t.headers.Connection="close");let n=t.data;if(e.httpRequest.headers["content-encoding"]&&t.data.length>0)switch(e.httpRequest.headers["content-encoding"]){case"gzip":t.headers["Content-Encoding"]="gzip",n=await gzipPromisified(n);break;case"deflate":t.headers["Content-Encoding"]="deflate",n=await deflatePromisified(n)}const a=e.httpResponse,r=a.connection;if(a.setHeader("Content-Length",Buffer.byteLength(n)),a.writeHead(t.code,t.headers),e.debug&&outgoingHttpResponse(a,e.deviceId,t.data),a.end(n),r.destroyed)accessError({sessionContext:e,message:"Connection dropped"});else if(s){await endSession(e)&&accessInfo({sessionContext:e,message:"New device registered"})}else e.lastActivity=Date.now(),currentSessions.set(r,e)}function recordFault(e,t,s,n){s||(s=e.provisions,n=e.channels);const a=Object.keys(n);if(!a.length)throw new Error("Fault not associated with a channel!");const r=e.faults;for(const s of a){const o=e.faults[s]?e.faults[s].provisions:[];if(r[s]=Object.assign({provisions:o,timestamp:e.timestamp},t),s.startsWith("task_")){const t=s.slice(5);for(const n of e.tasks)n._id===t&&n.expiry&&(r[s].expiry=n.expiry)}null!=e.retries[s]?++e.retries[s]:(e.retries[s]=0,1!==a.length&&(r[s].retryNow=!0)),0===n[s]&&(r[s].precondition=!0),e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0,accessWarn({sessionContext:e,message:"Channel has faulted",fault:t,channel:s,retries:e.retries[s]})}for(let e=0;e<s.length;++e)for(const t of a)n[t]>>e&1&&r[t].provisions.push(s[e]);for(const e of a){const t=r[e].provisions;r[e].provisions=[],appendProvisions(r[e].provisions,t)}clearProvisions(e)}async function inform$1(e,t){const s=await inform(e,t.cpeRequest),n=response({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}),a=getConfig$1(e.cacheSnapshot,"cwmp.cookiesPath",{},e.timestamp,t=>configContextCallback(e,t));return n.headers["Set-Cookie"]=a?`session=${e.sessionId}; Path=${a}`:`session=${e.sessionId}`,n}async function transferComplete$1(e,t){const{acsResponse:s,operation:n,fault:a}=await transferComplete(e,t.cpeRequest);return n||accessWarn({sessionContext:e,message:"Unrecognized command key",rpc:t}),a&&(Object.assign(e.retries,n.retries),recordFault(e,a,n.provisions,n.channels)),writeResponse(e,response({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}))}function appendProvisions(e,t){let s=!1;const n=new WeakMap;for(const t of e)n.set(t,JSON.stringify(t));for(let a=t.length-1;a>=0;--a){let r=t[a];const o=JSON.stringify(r);for(let i=e.length-1;i>=0;--i){o===n.get(e[i])&&(!r||i>=e.length-(t.length-a)?r=null:(e.splice(i,1),s=!0))}r&&(e.splice(e.length-(t.length-a)+1,0,r),n.set(r,o),s=!0)}return s}async function applyPresets(e){const t=e.deviceData,s=getPresets$1(e.cacheSnapshot),n={};let a=null,r=null;const o=+getConfig$1(e.cacheSnapshot,"cwmp.retryDelay",{},e.timestamp,t=>configContextCallback(e,t));if(e.faults)for(const[t,s]of Object.entries(e.faults)){let i=0;if(s.retryNow||(i=s.timestamp+o*Math.pow(2,e.retries[t])*1e3),i<=e.timestamp){a=t,r=s.provisions;break}n[t]=s.precondition?1:2}t.timestamps.revision=1,t.attributes.revision=1;const i={};for(const s of t.paths.find(Path.parse("Events.*"),!1,!0)){const n=t.attributes.get(s);n&&n.value&&n.value[1][0]>=e.timestamp&&(i[s.segments[1]]=!0)}const c={},l=[];for(const t of s){if(null!=a){if(t.channel!==a)continue}else if(1===n[t.channel])continue;let s=!0;for(const[e,n]of Object.entries(t.events))if(!n!=!i[e.replace(/\s+/g,"_")]){s=!1;break}if(s){if(t.schedule&&t.schedule.schedule){if(!(cron(e.timestamp,t.schedule.schedule)[0]+t.schedule.duration>e.timestamp))continue}l.push(t);for(const s of extractParams(t.precondition))e.channels[t.channel]=0,"string"==typeof s&&(c[s]=Path.parse(s))}}const u=Object.values(c).map(e=>({path:e,pathGet:1,pathSet:null,attrGet:{value:1},attrSet:null,defer:!0})),{fault:p,rpcId:f,rpc:d}=await rpcRequest(e,u);if(p)return recordFault(e,p),clearProvisions(e),applyPresets(e);if(d)return sendAcsRequest(e,f,d);clearProvisions(e),null!=a&&addProvisions(e,a,r);const m={};for(const t of l)evaluate(t.precondition,{},e.timestamp,t=>configContextCallback(e,t))&&(2===n[t.channel]?m[t.channel]=(m[t.channel]||[]).concat(t.provisions):addProvisions(e,t.channel,t.provisions));for(const[t,s]of Object.entries(m))appendProvisions(e.faults[t].provisions,s)&&(e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null==a&&(e.presetCycles=(e.presetCycles||0)+1),e.presetCycles>MAX_CYCLES){const t={code:"preset_loop",message:"The presets are stuck in an endless configuration loop",timestamp:e.timestamp};recordFault(e,t);for(const t of Object.values(e.faults))delete t.retryNow;return clearProvisions(e),sendAcsRequest(e)}t.timestamps.dirty=0,t.attributes.dirty=0;const{fault:h,rpcId:g,rpc:v}=await rpcRequest(e,null);if(h)return recordFault(e,h),clearProvisions(e),applyPresets(e);if(!v){for(const t of Object.keys(e.channels))e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null!=a)return applyPresets(e);if(e.deviceData.timestamps.dirty>1||e.deviceData.attributes.dirty>1)return applyPresets(e)}return sendAcsRequest(e,g,v)}async function nextRpc(e){const{fault:t,rpcId:s,rpc:n}=await rpcRequest(e,null);if(t)return recordFault(e,t),clearProvisions(e),nextRpc(e);if(n)return sendAcsRequest(e,s,n);for(const[t,s]of Object.entries(e.channels))if(s&&e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0),t.startsWith("task_")){const s=t.slice(5);e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(s);for(let t=0;t<e.tasks.length;++t)if(e.tasks[t]._id===s){e.tasks.splice(t,1);break}}clearProvisions(e),e.tasks=e.tasks.filter(t=>{if(!(t.expiry<=e.timestamp))return!0;accessInfo({sessionContext:e,message:"Task expired",task:t}),e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(t._id);const s=`task_${t._id}`;return e.faults[s]&&(delete e.faults[s],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0),!1});const a=e.tasks.find(t=>!e.faults[`task_${t._id}`]);if(!a)return applyPresets(e);let r;switch(a.name){case"getParameterValues":e.channels[`task_${a._id}`]=0;for(const t of a.parameterNames)addProvisions(e,`task_${a._id}`,[["refresh",t]]);break;case"setParameterValues":e.channels[`task_${a._id}`]=0;for(const t of a.parameterValues)addProvisions(e,`task_${a._id}`,[["value",t[0],t[1]]]);break;case"refreshObject":addProvisions(e,`task_${a._id}`,[["refresh",a.objectName]]);break;case"reboot":addProvisions(e,`task_${a._id}`,[["reboot"]]);break;case"factoryReset":addProvisions(e,`task_${a._id}`,[["reset"]]);break;case"download":addProvisions(e,`task_${a._id}`,[["download",a.fileType,a.fileName,a.targetFileName||""]]);break;case"addObject":r=(a.parameterValues||[]).map(e=>`${e[0]}:${JSON.stringify(e[1])}`).join(","),addProvisions(e,`task_${a._id}`,[["instances",`${a.objectName}.[${r}]`,"+1"]]);break;case"deleteObject":addProvisions(e,`task_${a._id}`,[["instances",a.objectName,0]]);break;default:throw new Error("Task name not recognized")}return nextRpc(e)}async function endSession(e){let t=null!=e.cacheUntil;const s=[];if(s.push(saveDevice(e.deviceId,e.deviceData,e.new,e.timestamp)),e.operationsTouched)for(const n of Object.keys(e.operationsTouched))t=!0,e.operations[n]?s.push(saveOperation(e.deviceId,n,e.operations[n])):s.push(deleteOperation(e.deviceId,n));if(e.doneTasks&&e.doneTasks.length&&(t=!0,s.push(clearTasks(e.deviceId,e.doneTasks))),e.faultsTouched)for(const n of Object.keys(e.faultsTouched))t=!0,e.faults[n]?(e.faults[n].retries=e.retries[n],s.push(saveFault(e.deviceId,n,e.faults[n]))):s.push(deleteFault(e.deviceId,n));return t&&s.push(cacheDueTasksAndFaultsAndOperations(e.deviceId,e.tasks,e.faults,e.operations,e.cacheUntil)),await Promise.all(s),e.new}async function sendAcsRequest(e,t,s){if(!s)return writeResponse(e,response(null),!0);if("Download"===s.name){const t=s;if(t.fileSize=0,!t.url){let s=""+get("FS_URL_PREFIX");if(!s){const t=+get("FS_PORT"),n=!!get("FS_SSL_CERT"),a=getRequestOrigin(e.httpRequest);let r=a.localAddress;a.host&&([r]=a.host.split(":",1)),s=(n?"https":"http")+`://${r}:${t}/`}t.url=s+encodeURI(t.fileName);const n=getFiles$1(e.cacheSnapshot);n[t.fileName]&&(t.fileSize=n[t.fileName].length)}}const n={id:t,acsRequest:s,cwmpVersion:e.cwmpVersion};return accessInfo({sessionContext:e,message:"ACS request",rpc:n}),writeResponse(e,response(n))}async function getSession(e,t){const s=currentSessions.get(e);if(s)return currentSessions.delete(e),s;if(!t)return null;await new Promise(e=>setTimeout(e,100));const n=await pop(`session_${t}`);return n?deserialize(n):null}const remoteAddressWorkaround=new WeakMap;function onConnection(e){remoteAddressWorkaround.set(e,e.remoteAddress),e.on("close",async()=>{const t=currentSessions.get(e);if(!t)return;currentSessions.delete(e);const s=Date.now(),n=t.lastActivity,a=flatten({sessionContext:t,message:"Session timeout",sessionTimestamp:t.timestamp}),r=t.lastActivity+1e3*t.timeout-s;if(r<=0)return void accessError(a);if(setTimeout(async()=>{const e=await get$1(`session_${t.sessionId}`);e&&(await deserialize(e)).lastActivity===n&&accessError(a)},r+1e3).unref(),0===t.state)return;const o=await serialize(t);await set$1(`session_${t.sessionId}`,o,Math.ceil(r/1e3)+3)})}async function getDueTasksAndFaultsAndOperations(e,t){const s=await get$1(`${e}_tasks_faults_operations`);if(s){const e=JSON.parse(s);return{tasks:e.tasks||[],faults:e.faults||{},operations:e.operations||{},ttl:0}}const n=await Promise.all([getDueTasks(e,t),getFaults(e),getOperations(e)]);return{tasks:n[0][0],faults:n[1],operations:n[2],ttl:n[0][1]||0}}async function cacheDueTasksAndFaultsAndOperations(e,t,s,n,a){const r={tasks:null,faults:null,operations:null};let o;t.length&&(r.tasks=t),Object.keys(s).length&&(r.faults=s),Object.keys(n).length&&(r.operations=n),o=a?Math.trunc((Date.now()-a)/1e3):get("MAX_CACHE_TTL",e),await set$1(`${e}_tasks_faults_operations`,JSON.stringify(r),o)}async function reportBadState(e){accessError({message:"Bad session state",sessionContext:e});const t=e.httpResponse;currentSessions.delete(t.connection);const s="Bad session state";t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),e.debug&&outgoingHttpResponse(t,e.deviceId,s),t.end(s)}async function responseUnauthorized(e,t){const s={};if(t)accessError({message:"Authentication failure",sessionContext:e}),s.Connection="close";else{if(getRequestOrigin(e.httpRequest).encrypted)s["WWW-Authenticate"]=`Basic realm="${REALM}"`;else{const t=crypto.randomBytes(16).toString("hex");sessionsNonces.set(e.httpRequest.connection,t);let n=`Digest realm="${REALM}"`;n+=',qop="auth,auth-int"',n+=`,nonce="${t}"`,s["WWW-Authenticate"]=n}currentSessions.set(e.httpRequest.connection,e)}const n=e.httpResponse,a="Unauthorized";n.setHeader("Content-Length",Buffer.byteLength(a)),n.writeHead(401,s),e.debug&&outgoingHttpResponse(n,e.deviceId,a),n.end(a)}async function processRequest(e,t,s,n){for(const n of s)n.sessionContext=e,n.rpc=t,accessWarn(n);if(0===e.state){if(!t.cpeRequest||"Inform"!==t.cpeRequest.name)return reportBadState(e);const s=await inform$1(e,t);return e.debug=!!getConfig$1(e.cacheSnapshot,"cwmp.debug",{},e.timestamp,t=>configContextCallback(e,t)),e.timeout||(e.timeout=+getConfig$1(e.cacheSnapshot,"cwmp.sessionTimeout",{},e.timestamp,t=>configContextCallback(e,t))),e.debug&&incomingHttpRequest(e.httpRequest,e.deviceId,n),await authenticate(e,n)?(e.state=1,e.authState=2,accessInfo({sessionContext:e,message:"Inform",rpc:t}),writeResponse(e,s)):e.authState?responseUnauthorized(e,!0):(e.authState=1,responseUnauthorized(e,!1))}if(e.debug&&incomingHttpRequest(e.httpRequest,e.deviceId,n),2!==e.authState){if(!await authenticate(e,n))return e.authState?responseUnauthorized(e,!0):(e.authState=1,responseUnauthorized(e,!1));e.authState=2}if(t.cpeRequest){if("TransferComplete"===t.cpeRequest.name)return 1!==e.state?reportBadState(e):(accessInfo({sessionContext:e,message:"CPE request",rpc:t}),transferComplete$1(e,t));if("GetRPCMethods"===t.cpeRequest.name){if(1!==e.state)return reportBadState(e);accessInfo({sessionContext:e,message:"CPE request",rpc:t});const s=response({id:t.id,acsResponse:{name:"GetRPCMethodsResponse",methodList:["Inform","GetRPCMethods","TransferComplete"]},cwmpVersion:e.cwmpVersion});return writeResponse(e,s)}if(1!==e.state||"Inform"===t.cpeRequest.name)return void reportBadState(e);throw new Error("ACS method not supported")}if(t.cpeResponse)return 2!==e.state?reportBadState(e):(await rpcResponse(e,t.id,t.cpeResponse),nextRpc(e));if(t.cpeFault){if(2!==e.state)return reportBadState(e);accessWarn({sessionContext:e,message:"CPE fault",rpc:t});const s=await rpcFault(e,t.id,t.cpeFault);return s&&(recordFault(e,s),clearProvisions(e)),nextRpc(e)}{if(1!==e.state)return reportBadState(e);e.state=2;const{faults:t,operations:s}=await timeoutOperations(e);for(const[n,a]of t.entries()){for(const[t,a]of Object.entries(s[n].retries))e.retries[t]=a;recordFault(e,a,s[n].provisions,s[n].channels)}return nextRpc(e)}}function listener$1(e,t){stats.concurrentRequests+=1,listenerAsync(e,t).then(()=>{stats.concurrentRequests-=1}).catch(e=>{currentSessions.delete(t.connection),t.writeHead(500,{Connection:"close"}),t.end(`${e.name}: ${e.message}`),stats.concurrentRequests-=1,setTimeout(()=>{throw e})})}function decodeString(e,t){try{return e.toString(t)}catch(s){if(iconvLite.encodingExists(t))return iconvLite.decode(e,t)}return null}async function listenerAsync(e,t){if(stats.totalRequests+=1,"POST"!==e.method)return t.writeHead(405,{Allow:"POST",Connection:"close"}),void t.end("405 Method Not Allowed");let s;const n=/\s*([a-zA-Z0-9\-_]+?)\s*=\s*"?([a-zA-Z0-9\-_]*?)"?\s*(,|;|$)/g;let a;for(;a=n.exec(e.headers.cookie);)"session"===a[1]&&(s=a[2]);if(!s&&stats.concurrentRequests>MAX_CONCURRENT_REQUESTS)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(stats.droppedRequests+=1);let r=e;if(e.headers["content-encoding"])switch(e.headers["content-encoding"]){case"gzip":r=e.pipe(zlib.createGunzip());break;case"deflate":r=e.pipe(zlib.createInflate());break;default:return t.writeHead(415,{Connection:"close"}),void t.end("415 Unsupported Media Type")}const o=await new Promise((t,s)=>{const n=[];let a=0;r.on("data",e=>{n.push(e),a+=e.length}),r.on("end",()=>{const e=Buffer.allocUnsafe(a);let s=0;for(const t of n)t.copy(e,s,0,t.length),s+=t.length;t(e)}),r.on("error",s),e.on("aborted",()=>{t(null)})});if(!o)return;const i=!currentSessions.has(e.connection),c=await getSession(e.connection,s);if(c){if(c.httpRequest=e,c.httpResponse=t,i&&c.sessionId!==s||c.lastActivity+1e3*c.timeout<Date.now()){accessError({message:"Invalid session",sessionContext:c});const e="Invalid session";return t.setHeader("Content-Length",Buffer.byteLength(e)),t.writeHead(400,{Connection:"close"}),c.debug&&outgoingHttpResponse(t,c.deviceId,e),void t.end(e)}i&&1!==c.authState&&(c.authState=0)}else if(stats.concurrentRequests>MAX_CONCURRENT_REQUESTS)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(stats.droppedRequests+=1);let l;if(e.headers["content-type"]){const t=e.headers["content-type"].match(/charset=['"]?([^'"\s]+)/i);t&&(l=t[1].toLowerCase())}if(!l){const e=parseXmlDeclaration(o),t=e?e.find(e=>"encoding"===e.localName):null;l=t?t.value.toLowerCase():"utf8"}const u=decodeString(o,l);if(null==u){const s=`Unknown encoding '${l}'`;if(accessError({message:"XML parse error",parseError:s,sessionContext:c||{httpRequest:e,httpResponse:t}}),t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),c)c.debug&&outgoingHttpResponse(t,c.deviceId,s);else{!!getConfig$1(await getCurrentSnapshot(),"cwmp.debug",{remoteAddress:getRequestOrigin(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?getRequestOrigin(e).remoteAddress:t)&&outgoingHttpResponse(t,null,s)}return void t.end(s)}const p=[];let f;try{f=request(u,c?c.cwmpVersion:null,p)}catch(s){if(accessError({message:"XML parse error",parseError:s.message.trim(),sessionContext:c||{httpRequest:e,httpResponse:t}}),t.setHeader("Content-Length",Buffer.byteLength(s.message)),t.writeHead(400,{Connection:"close"}),c)c.debug&&outgoingHttpResponse(t,c.deviceId,s.message);else{!!getConfig$1(await getCurrentSnapshot(),"cwmp.debug",{remoteAddress:getRequestOrigin(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?getRequestOrigin(e).remoteAddress:t)&&outgoingHttpResponse(t,null,s.message)}return void t.end(s.message)}if(c)return processRequest(c,f,p,u);if(!f.cpeRequest||"Inform"!==f.cpeRequest.name){accessError({message:"Invalid session",sessionContext:c||{httpRequest:e,httpResponse:t}});const s="Invalid session";return t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),!!getConfig$1(await getCurrentSnapshot(),"cwmp.debug",{remoteAddress:getRequestOrigin(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?getRequestOrigin(e).remoteAddress:t)&&outgoingHttpResponse(t,c.deviceId,s),void t.end(s)}stats.initiatedSessions+=1;const d=generateDeviceId(f.cpeRequest.deviceId),m=await getCurrentSnapshot(),h=init$1(d,f.cwmpVersion,f.sessionTimeout);h.cacheSnapshot=m,h.httpRequest=e,h.httpResponse=t,h.sessionId=crypto.randomBytes(8).toString("hex"),e.connection.setTimeout(1e3*h.timeout);const{tasks:g,faults:v,operations:S,ttl:w}=await getDueTasksAndFaultsAndOperations(d,h.timestamp);h.tasks=g,h.operations=S,h.cacheUntil=w,h.faults=v,h.retries={};for(const[e,t]of Object.entries(h.faults))t.expiry>=h.timestamp?(delete h.faults[e],h.faultsTouched||(h.faultsTouched={}),h.faultsTouched[e]=!0):h.retries[e]=t.retries;const y=await fetchDevice(h.deviceId,h.timestamp);if(y)for(const e of y){const t=h.deviceData.paths.add(e[0]);h.deviceData.timestamps.set(t,e[1],0),e[2]&&h.deviceData.attributes.set(t,e[2],0)}else h.new=!0;return processRequest(h,f,p,u)}setInterval(()=>{stats.droppedRequests&&warn({message:"Worker overloaded",droppedRequests:stats.droppedRequests,totalRequests:stats.totalRequests,initiatedSessions:stats.initiatedSessions,pid:process.pid}),stats.totalRequests=0,stats.droppedRequests=0,stats.initiatedSessions=0},1e4).unref(),init("cwmp",version);const SERVICE_ADDRESS=get("CWMP_INTERFACE"),SERVICE_PORT=get("CWMP_PORT");function exitWorkerGracefully(){setTimeout(exitWorkerUngracefully,5e3).unref(),Promise.all([disconnect(),disconnect$1(),killAll(),worker.disconnect()]).catch(exitWorkerUngracefully)}function exitWorkerUngracefully(){killAll().then(()=>{process.exit(1)})}if(worker){const e={key:get("CWMP_SSL_KEY"),cert:get("CWMP_SSL_CERT")};process.on("uncaughtException",e=>{"ERR_IPC_DISCONNECTED"!==e.code&&(error({message:"Uncaught exception",exception:e,pid:process.pid}),stop$1().then(exitWorkerGracefully).catch(exitWorkerUngracefully))});const t=Promise.all([connect(),connect$1()]).then(()=>{start$1(SERVICE_PORT,SERVICE_ADDRESS,e,listener$1,onConnection,0)}).catch(e=>{setTimeout(()=>{throw e})});process.on("SIGINT",()=>{t.finally(()=>{stop$1().then(exitWorkerGracefully).catch(exitWorkerUngracefully)})}),process.on("SIGTERM",()=>{t.finally(()=>{stop$1().then(exitWorkerGracefully).catch(exitWorkerUngracefully)})})}else{const e=get("CWMP_WORKER_PROCESSES");info({message:"genieacs-cwmp starting",pid:process.pid,version:version}),start(e,SERVICE_PORT,SERVICE_ADDRESS),process.on("SIGINT",()=>{info({message:"Received signal SIGINT, exiting",pid:process.pid}),stop()}),process.on("SIGTERM",()=>{info({message:"Received signal SIGTERM, exiting",pid:process.pid}),stop()})}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
